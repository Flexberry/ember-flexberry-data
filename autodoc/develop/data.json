{
    "project": {
        "name": "Flexberry Documentation",
        "version": "master"
    },
    "files": {
        "addon/adapters/odata.js": {
            "name": "addon/adapters/odata.js",
            "modules": {},
            "classes": {
                "Adapter.OData": 1
            },
            "fors": {},
            "namespaces": {
                "Adapter": 1
            }
        },
        "addon/adapters/offline.js": {
            "name": "addon/adapters/offline.js",
            "modules": {},
            "classes": {
                "Adapter.Offline": 1
            },
            "fors": {},
            "namespaces": {
                "Adapter": 1
            }
        },
        "addon/initializers/flexberry-enum.js": {
            "name": "addon/initializers/flexberry-enum.js",
            "modules": {},
            "classes": {},
            "fors": {
                "ApplicationInitializer": 1
            },
            "namespaces": {}
        },
        "addon/mixins/regenerated/serializers/i-c-s-soft-s-t-o-r-m-n-e-t-business-audit-objects-audit-entity.js": {
            "name": "addon/mixins/regenerated/serializers/i-c-s-soft-s-t-o-r-m-n-e-t-business-audit-objects-audit-entity.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "addon/mixins/regenerated/serializers/i-c-s-soft-s-t-o-r-m-n-e-t-business-audit-objects-audit-field.js": {
            "name": "addon/mixins/regenerated/serializers/i-c-s-soft-s-t-o-r-m-n-e-t-business-audit-objects-audit-field.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "addon/mixins/regenerated/serializers/i-c-s-soft-s-t-o-r-m-n-e-t-business-audit-objects-object-type.js": {
            "name": "addon/mixins/regenerated/serializers/i-c-s-soft-s-t-o-r-m-n-e-t-business-audit-objects-object-type.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "addon/mixins/regenerated/serializers/i-c-s-soft-s-t-o-r-m-n-e-t-security-agent.js": {
            "name": "addon/mixins/regenerated/serializers/i-c-s-soft-s-t-o-r-m-n-e-t-security-agent.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "addon/mixins/regenerated/serializers/i-c-s-soft-s-t-o-r-m-n-e-t-security-link-group.js": {
            "name": "addon/mixins/regenerated/serializers/i-c-s-soft-s-t-o-r-m-n-e-t-security-link-group.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "addon/mixins/regenerated/serializers/i-c-s-soft-s-t-o-r-m-n-e-t-security-session.js": {
            "name": "addon/mixins/regenerated/serializers/i-c-s-soft-s-t-o-r-m-n-e-t-security-session.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "addon/mixins/adapter.js": {
            "name": "addon/mixins/adapter.js",
            "modules": {},
            "classes": {
                "Projection.AdapterMixin": 1
            },
            "fors": {},
            "namespaces": {
                "Projection": 1
            }
        },
        "addon/mixins/audit-model.js": {
            "name": "addon/mixins/audit-model.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "addon/mixins/copyable.js": {
            "name": "addon/mixins/copyable.js",
            "modules": {},
            "classes": {
                "CopyableMixin": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "addon/mixins/offline-model.js": {
            "name": "addon/mixins/offline-model.js",
            "modules": {},
            "classes": {
                "Offline.ModelMixin": 1
            },
            "fors": {},
            "namespaces": {
                "Offline": 1
            }
        },
        "addon/mixins/store.js": {
            "name": "addon/mixins/store.js",
            "modules": {},
            "classes": {
                "Projection.StoreMixin": 1
            },
            "fors": {},
            "namespaces": {
                "Projection": 1
            }
        },
        "addon/models/model.js": {
            "name": "addon/models/model.js",
            "modules": {},
            "classes": {
                "Projection.Model": 1
            },
            "fors": {},
            "namespaces": {
                "Projection": 1
            }
        },
        "addon/models/offline-model.js": {
            "name": "addon/models/offline-model.js",
            "modules": {},
            "classes": {
                "Offline.Model": 1
            },
            "fors": {},
            "namespaces": {
                "Offline": 1
            }
        },
        "addon/query/base-adapter.js": {
            "name": "addon/query/base-adapter.js",
            "modules": {},
            "classes": {
                "Query.BaseAdapter": 1
            },
            "fors": {},
            "namespaces": {
                "Query": 1
            }
        },
        "addon/query/base-builder.js": {
            "name": "addon/query/base-builder.js",
            "modules": {},
            "classes": {
                "Query.BaseBuilder": 1
            },
            "fors": {},
            "namespaces": {
                "Query": 1
            }
        },
        "addon/query/builder.js": {
            "name": "addon/query/builder.js",
            "modules": {},
            "classes": {
                "Query.Builder": 1
            },
            "fors": {},
            "namespaces": {
                "Query": 1
            }
        },
        "addon/query/condition.js": {
            "name": "addon/query/condition.js",
            "modules": {},
            "classes": {
                "Query.Condition": 1
            },
            "fors": {
                "Query.Condition": 1
            },
            "namespaces": {
                "Query": 1
            }
        },
        "addon/query/filter-operator.js": {
            "name": "addon/query/filter-operator.js",
            "modules": {},
            "classes": {
                "Query.FilterOperator": 1
            },
            "fors": {
                "Query.FilterOperator": 1
            },
            "namespaces": {
                "Query": 1
            }
        },
        "addon/query/indexeddb-adapter.js": {
            "name": "addon/query/indexeddb-adapter.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {
                "Query": 1
            }
        },
        "addon/query/js-adapter.js": {
            "name": "addon/query/js-adapter.js",
            "modules": {},
            "classes": {
                "Query.IndexedDBAdapter": 1,
                "Query.JsAdapter": 1
            },
            "fors": {},
            "namespaces": {
                "Query": 1
            }
        },
        "addon/query/odata-adapter.js": {
            "name": "addon/query/odata-adapter.js",
            "modules": {},
            "classes": {
                "Query.ODataAdapter": 1
            },
            "fors": {},
            "namespaces": {
                "Query": 1
            }
        },
        "addon/query/order-by-clause.js": {
            "name": "addon/query/order-by-clause.js",
            "modules": {},
            "classes": {
                "Query.OrderByClause": 1
            },
            "fors": {},
            "namespaces": {
                "Query": 1
            }
        },
        "addon/query/predicate.js": {
            "name": "addon/query/predicate.js",
            "modules": {},
            "classes": {
                "Query.SimplePredicate": 1,
                "Query.DatePredicate": 1,
                "Query.ComplexPredicate": 1,
                "Query.StringPredicate": 1,
                "Query.GeographyPredicate": 1,
                "Query.GeometryPredicate": 1,
                "Query.DetailPredicate": 1,
                "Query.NotPredicate": 1,
                "Query.IsOfPredicate": 1
            },
            "fors": {
                "BasePredicate": 1,
                "Query.BasePredicate": 1
            },
            "namespaces": {
                "Query": 1
            }
        },
        "addon/query/query-object.js": {
            "name": "addon/query/query-object.js",
            "modules": {},
            "classes": {
                "Query.QueryObject": 1
            },
            "fors": {},
            "namespaces": {
                "Query": 1
            }
        },
        "addon/serializers/base.js": {
            "name": "addon/serializers/base.js",
            "modules": {},
            "classes": {
                "Serializer.Base": 1
            },
            "fors": {},
            "namespaces": {
                "Serializer": 1
            }
        },
        "addon/serializers/odata.js": {
            "name": "addon/serializers/odata.js",
            "modules": {},
            "classes": {
                "Serializer.OData": 1
            },
            "fors": {},
            "namespaces": {
                "Serializer": 1
            }
        },
        "addon/serializers/offline.js": {
            "name": "addon/serializers/offline.js",
            "modules": {},
            "classes": {
                "Serializer.Offline": 1
            },
            "fors": {},
            "namespaces": {
                "Serializer": 1
            }
        },
        "addon/services/dexie.js": {
            "name": "addon/services/dexie.js",
            "modules": {},
            "classes": {
                "Offline.DexieService": 1
            },
            "fors": {},
            "namespaces": {
                "Offline": 1
            }
        },
        "addon/services/offline-globals.js": {
            "name": "addon/services/offline-globals.js",
            "modules": {},
            "classes": {
                "Offline.GlobalsService": 1
            },
            "fors": {},
            "namespaces": {
                "Offline": 1
            }
        },
        "addon/services/syncer.js": {
            "name": "addon/services/syncer.js",
            "modules": {},
            "classes": {
                "Offline.Syncer": 1
            },
            "fors": {},
            "namespaces": {
                "Offline": 1
            }
        },
        "addon/services/user.js": {
            "name": "addon/services/user.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "addon/stores/base-store.js": {
            "name": "addon/stores/base-store.js",
            "modules": {},
            "classes": {
                "Offline.Store": 1
            },
            "fors": {},
            "namespaces": {
                "Offline": 1
            }
        },
        "addon/stores/local-store.js": {
            "name": "addon/stores/local-store.js",
            "modules": {},
            "classes": {
                "Offline.LocalStore": 1
            },
            "fors": {},
            "namespaces": {
                "Offline": 1
            }
        },
        "addon/stores/online-store.js": {
            "name": "addon/stores/online-store.js",
            "modules": {},
            "classes": {
                "OData.OnlineStore": 1
            },
            "fors": {},
            "namespaces": {
                "OData": 1
            }
        },
        "addon/transforms/decimal.js": {
            "name": "addon/transforms/decimal.js",
            "modules": {},
            "classes": {
                "DecimalTransform": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "addon/transforms/file.js": {
            "name": "addon/transforms/file.js",
            "modules": {},
            "classes": {
                "FileTransform": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "addon/transforms/flexberry-enum.js": {
            "name": "addon/transforms/flexberry-enum.js",
            "modules": {},
            "classes": {
                "FlexberryEnumTransform": 1
            },
            "fors": {
                "FlexberryEnumTransform": 1
            },
            "namespaces": {}
        },
        "addon/transforms/guid.js": {
            "name": "addon/transforms/guid.js",
            "modules": {},
            "classes": {
                "GuidTransform": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "addon/utils/attributes.js": {
            "name": "addon/utils/attributes.js",
            "modules": {},
            "classes": {},
            "fors": {
                "Projection": 1
            },
            "namespaces": {}
        },
        "addon/utils/batch-queries.js": {
            "name": "addon/utils/batch-queries.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "addon/utils/create.js": {
            "name": "addon/utils/create.js",
            "modules": {},
            "classes": {},
            "fors": {
                "Projection": 1
            },
            "namespaces": {}
        },
        "addon/utils/enum-functions.js": {
            "name": "addon/utils/enum-functions.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "addon/utils/first-load-offline-objects.js": {
            "name": "addon/utils/first-load-offline-objects.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "addon/utils/generate-unique-id.js": {
            "name": "addon/utils/generate-unique-id.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "addon/utils/information.js": {
            "name": "addon/utils/information.js",
            "modules": {},
            "classes": {
                "Utils.Information": 1
            },
            "fors": {},
            "namespaces": {
                "Utils": 1
            }
        },
        "addon/utils/is-embedded.js": {
            "name": "addon/utils/is-embedded.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "addon/utils/is-uuid.js": {
            "name": "addon/utils/is-uuid.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "addon/utils/model-functions.js": {
            "name": "addon/utils/model-functions.js",
            "modules": {
                "ember-flexberry": 1
            },
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "addon/utils/queue.js": {
            "name": "addon/utils/queue.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "addon/utils/string-functions.js": {
            "name": "addon/utils/string-functions.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "addon/index.js": {
            "name": "addon/index.js",
            "modules": {
                "ember-flexberry-data": 1
            },
            "classes": {
                "Projection": 1,
                "Offline": 1,
                "Adapter": 1,
                "Serializer": 1,
                "Query": 1,
                "Utils": 1,
                "Security": 1,
                "Audit": 1
            },
            "fors": {},
            "namespaces": {}
        }
    },
    "modules": {
        "ember-flexberry-data": {
            "name": "ember-flexberry-data",
            "submodules": {},
            "elements": {},
            "classes": {
                "Adapter.OData": 1,
                "Adapter.Offline": 1,
                "ApplicationInitializer": 1,
                "Projection.AdapterMixin": 1,
                "CopyableMixin": 1,
                "Offline.ModelMixin": 1,
                "Projection.StoreMixin": 1,
                "Projection.Model": 1,
                "Offline.Model": 1,
                "Query.BaseAdapter": 1,
                "Query.BaseBuilder": 1,
                "Query.Builder": 1,
                "Query.Condition": 1,
                "Query.FilterOperator": 1,
                "Query.IndexedDBAdapter": 1,
                "Query.JsAdapter": 1,
                "Query.ODataAdapter": 1,
                "Query.OrderByClause": 1,
                "Query.BasePredicate": 1,
                "Query.SimplePredicate": 1,
                "Query.DatePredicate": 1,
                "Query.ComplexPredicate": 1,
                "Query.StringPredicate": 1,
                "Query.GeographyPredicate": 1,
                "Query.GeometryPredicate": 1,
                "Query.DetailPredicate": 1,
                "Query.NotPredicate": 1,
                "Query.IsOfPredicate": 1,
                "Query.QueryObject": 1,
                "Serializer.Base": 1,
                "Serializer.OData": 1,
                "Serializer.Offline": 1,
                "Offline.DexieService": 1,
                "Offline.GlobalsService": 1,
                "Offline.Syncer": 1,
                "Offline.Store": 1,
                "Offline.LocalStore": 1,
                "OData.OnlineStore": 1,
                "DecimalTransform": 1,
                "FileTransform": 1,
                "FlexberryEnumTransform": 1,
                "GuidTransform": 1,
                "Projection": 1,
                "Utils.Information": 1,
                "Offline": 1,
                "Adapter": 1,
                "Serializer": 1,
                "Query": 1,
                "Utils": 1,
                "Security": 1,
                "Audit": 1
            },
            "fors": {
                "ApplicationInitializer": 1,
                "Query.Condition": 1,
                "Query.FilterOperator": 1,
                "BasePredicate": 1,
                "Query.BasePredicate": 1,
                "FlexberryEnumTransform": 1,
                "Projection": 1
            },
            "namespaces": {
                "Adapter": 1,
                "Projection": 1,
                "Offline": 1,
                "Query": 1,
                "Serializer": 1,
                "OData": 1,
                "Utils": 1
            },
            "tag": "main",
            "file": "addon/index.js",
            "line": 169,
            "description": "Ember Addon that adds support of projections in models.",
            "extends": "DS.RESTAdapter",
            "access": "public",
            "tagname": "",
            "uses": [
                "EmberValidationsMixin",
                "Ember.EventedMixin",
                "CopyableMixin"
            ],
            "itemtype": "main",
            "params": [
                {
                    "name": "event",
                    "description": "Event object",
                    "type": "Object"
                },
                {
                    "name": "promises",
                    "description": "Array to which custom 'preSave' promises could be pushed",
                    "type": "Promise[]"
                }
            ],
            "is_constructor": 1
        },
        "ember-flexberry": {
            "name": "ember-flexberry",
            "submodules": {},
            "elements": {},
            "classes": {},
            "fors": {},
            "namespaces": {},
            "tag": "module",
            "file": "addon/utils/model-functions.js",
            "line": 1
        }
    },
    "classes": {
        "Adapter.OData": {
            "name": "Adapter.OData",
            "shortname": "Adapter.OData",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ember-flexberry-data",
            "namespace": "Adapter",
            "file": "addon/adapters/odata.js",
            "line": 14,
            "description": "The OData adapter class.\nUses Flexberry Query as a language for requesting server."
        },
        "Adapter.Offline": {
            "name": "Adapter.Offline",
            "shortname": "Adapter.Offline",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ember-flexberry-data",
            "namespace": "Adapter",
            "file": "addon/adapters/offline.js",
            "line": 20,
            "description": "Default adapter for {{#crossLink \"Offline.LocalStore\"}}{{/crossLink}}.",
            "extends": "<a href=\"http://emberjs.com/api/data/classes/DS.Adapter.html\">DS.Adapter</a>"
        },
        "ApplicationInitializer": {
            "name": "ApplicationInitializer",
            "shortname": "ApplicationInitializer",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ember-flexberry-data",
            "namespace": ""
        },
        "Projection.AdapterMixin": {
            "name": "Projection.AdapterMixin",
            "shortname": "Projection.AdapterMixin",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ember-flexberry-data",
            "namespace": "Projection",
            "file": "addon/mixins/adapter.js",
            "line": 3,
            "description": "Mixin for {{#crossLink \"DS.Adapter\"}}Adapter{{/crossLink}} to support\nfetching models using projection."
        },
        "CopyableMixin": {
            "name": "CopyableMixin",
            "shortname": "CopyableMixin",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ember-flexberry-data",
            "namespace": "",
            "file": "addon/mixins/copyable.js",
            "line": 4,
            "description": "Mixin for base model to support creating record by prototype."
        },
        "Offline.ModelMixin": {
            "name": "Offline.ModelMixin",
            "shortname": "Offline.ModelMixin",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [
                "Offline.Model"
            ],
            "module": "ember-flexberry-data",
            "namespace": "Offline",
            "file": "addon/mixins/offline-model.js",
            "line": 9,
            "description": "Mixin for Ember models.\nAdds metadata properties that can be used to resolve synchronization conflicts.\nCreation and changing date and time of record will be filled with current date and time on model saving.\nIt's recommended to use this mixin when model class extends subclass of [DS.Model](http://emberjs.com/api/data/classes/DS.Model.html) or\nincludes other mixins, i.e. it's not inherited directly from [DS.Model](http://emberjs.com/api/data/classes/DS.Model.html).\nAlso it can be used explicitly when it is not necessary to use projections for particular model in application.\nIf model class inherited directly from [DS.Model](http://emberjs.com/api/data/classes/DS.Model.html) and it's planned to use projections,\nthen it's recommended to extend model class from {{#crossLink \"Offline.Model\"}}{{/crossLink}}.",
            "extends": "<a href=\"http://emberjs.com/api/classes/Ember.Mixin.html\">Ember.Mixin</a>",
            "access": "public",
            "tagname": ""
        },
        "Projection.StoreMixin": {
            "name": "Projection.StoreMixin",
            "shortname": "Projection.StoreMixin",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ember-flexberry-data",
            "namespace": "Projection",
            "file": "addon/mixins/store.js",
            "line": 5,
            "description": "Mixin for {{#crossLink \"DS.Store\"}}Store{{/crossLink}} to support\nfetching models using projection."
        },
        "Projection.Model": {
            "name": "Projection.Model",
            "shortname": "Projection.Model",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ember-flexberry-data",
            "namespace": "Projection",
            "file": "addon/models/model.js",
            "line": 7,
            "description": "Base model that supports projections, validations and copying."
        },
        "Offline.Model": {
            "name": "Offline.Model",
            "shortname": "Offline.Model",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ember-flexberry-data",
            "namespace": "Offline",
            "file": "addon/models/offline-model.js",
            "line": 10,
            "description": "Model with projections and additional metadata for offline support.\nAll metadata properties will be added to all projections (also for relationships).",
            "extends": "<a href=\"http://flexberry.github.io/Documentation/develop/classes/Projection.Model.html\">DS.Projection.Model</a>",
            "uses": [
                "Offline.ModelMixin"
            ],
            "access": "public",
            "tagname": ""
        },
        "Query.BaseAdapter": {
            "name": "Query.BaseAdapter",
            "shortname": "Query.BaseAdapter",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ember-flexberry-data",
            "namespace": "Query",
            "file": "addon/query/base-adapter.js",
            "line": 1,
            "description": "Base class of query adapter that translates query object into storage-related query."
        },
        "Query.BaseBuilder": {
            "name": "Query.BaseBuilder",
            "shortname": "Query.BaseBuilder",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ember-flexberry-data",
            "namespace": "Query",
            "file": "addon/query/base-builder.js",
            "line": 1,
            "description": "Base class of query builder."
        },
        "Query.Builder": {
            "name": "Query.Builder",
            "shortname": "Builder",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ember-flexberry-data",
            "namespace": "Query",
            "file": "addon/query/builder.js",
            "line": 21,
            "params": [
                {
                    "name": "store",
                    "description": "Store for building query.",
                    "type": "Store"
                },
                {
                    "name": "modelName",
                    "description": "The name of the requested entity.",
                    "type": "String"
                }
            ],
            "is_constructor": 1
        },
        "Query.Condition": {
            "name": "Query.Condition",
            "shortname": "Query.Condition",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ember-flexberry-data",
            "namespace": "Query",
            "file": "addon/query/condition.js",
            "line": 1,
            "description": "Enumeration of logical conditions for {{#crossLink \"Query.ComplexPredicate\"}}{{/crossLink}}."
        },
        "Query.FilterOperator": {
            "name": "Query.FilterOperator",
            "shortname": "Query.FilterOperator",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ember-flexberry-data",
            "namespace": "Query",
            "file": "addon/query/filter-operator.js",
            "line": 1,
            "description": "Enumeration of operators for filtering data for {{#crossLink \"Query.SimplePredicate\"}}{{/crossLink}}."
        },
        "Query.IndexedDBAdapter": {
            "name": "Query.IndexedDBAdapter",
            "shortname": "IndexedDBAdapter",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ember-flexberry-data",
            "namespace": "Query",
            "file": "addon/query/js-adapter.js",
            "line": 34,
            "params": [
                {
                    "name": "moment",
                    "description": "Moment service.",
                    "type": "Moment"
                }
            ],
            "is_constructor": 1
        },
        "Query.JsAdapter": {
            "name": "Query.JsAdapter",
            "shortname": "Query.JsAdapter",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ember-flexberry-data",
            "namespace": "Query",
            "file": "addon/query/js-adapter.js",
            "line": 8,
            "description": "Class of query language adapter that translates query object into JS function which\nfilters native JS array of objects by specified logic.\n\n```js\nconst data = [\n  { Name: 'A', Surname: 'X', Age: 10 },\n  { Name: 'B', Surname: 'Y', Age: 11 },\n  { Name: 'B', Surname: 'Z', Age: 12 }\n];\n\nlet adapter = new JSAdapter(moment);\nlet builder = new QueryBuilder(store, 'AnyUnknownModel').where('Name', FilterOperator.Eq, 'B');\nlet filter = adapter.buildFunc(builder.build());\n\nlet result = filter(data); // Y and Z\n```\n\nAll filters uses short circuit logic ([wiki](https://en.wikipedia.org/wiki/Short-circuit_evaluation))."
        },
        "Query.ODataAdapter": {
            "name": "Query.ODataAdapter",
            "shortname": "ODataAdapter",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ember-flexberry-data",
            "namespace": "Query",
            "file": "addon/query/odata-adapter.js",
            "line": 30,
            "params": [
                {
                    "name": "baseUrl",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "store",
                    "description": "",
                    "type": "EdmberData.Store"
                }
            ],
            "is_constructor": 1
        },
        "Query.OrderByClause": {
            "name": "Query.OrderByClause",
            "shortname": "Query.OrderByClause",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ember-flexberry-data",
            "namespace": "Query",
            "file": "addon/query/order-by-clause.js",
            "line": 9,
            "description": "Class of order-by part of the query.",
            "params": [
                {
                    "name": "clause",
                    "description": ""
                }
            ],
            "is_constructor": 1
        },
        "Query.BasePredicate": {
            "name": "Query.BasePredicate",
            "shortname": "BasePredicate",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ember-flexberry-data",
            "namespace": "Query"
        },
        "Query.SimplePredicate": {
            "name": "Query.SimplePredicate",
            "shortname": "Query.SimplePredicate",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ember-flexberry-data",
            "namespace": "Query",
            "file": "addon/query/predicate.js",
            "line": 17,
            "description": "The class of simple predicate for filtering attribute by value and filter operator.",
            "extends": "BasePredicate",
            "params": [
                {
                    "name": "attributePath",
                    "description": "The path to the attribute for filtering.",
                    "type": "String"
                },
                {
                    "name": "operator",
                    "description": "The filter operator.",
                    "type": "Query.FilterOperator|String"
                },
                {
                    "name": "value",
                    "description": "The value for filtering.",
                    "type": "String|Number"
                }
            ],
            "is_constructor": 1
        },
        "Query.DatePredicate": {
            "name": "Query.DatePredicate",
            "shortname": "Query.DatePredicate",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ember-flexberry-data",
            "namespace": "Query",
            "file": "addon/query/predicate.js",
            "line": 83,
            "description": "The class of date predicate for filtering attribute by value and filter operator.",
            "extends": "BasePredicate",
            "params": [
                {
                    "name": "attributePath",
                    "description": "The path to the attribute for filtering.",
                    "type": "String"
                },
                {
                    "name": "operator",
                    "description": "The filter operator.",
                    "type": "Query.FilterOperator|String"
                },
                {
                    "name": "value",
                    "description": "The value for filtering.",
                    "type": "String|Date"
                },
                {
                    "name": "timeless",
                    "description": "When true, dates will be filtered without time.",
                    "type": "Boolean"
                }
            ],
            "is_constructor": 1
        },
        "Query.ComplexPredicate": {
            "name": "Query.ComplexPredicate",
            "shortname": "Query.ComplexPredicate",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ember-flexberry-data",
            "namespace": "Query",
            "file": "addon/query/predicate.js",
            "line": 168,
            "description": "The class of complex predicate which include multiple predicates unioned with logical condition.",
            "extends": "BasePredicate",
            "params": [
                {
                    "name": "condition",
                    "description": "Logical condition for predicates.",
                    "type": "Query.Condition"
                },
                {
                    "name": "predicates",
                    "description": "List of predicates for combining.",
                    "type": "Query.BasePredicate",
                    "multiple": true
                }
            ],
            "is_constructor": 1
        },
        "Query.StringPredicate": {
            "name": "Query.StringPredicate",
            "shortname": "Query.StringPredicate",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ember-flexberry-data",
            "namespace": "Query",
            "file": "addon/query/predicate.js",
            "line": 237,
            "description": "The predicate class for string attributes.",
            "extends": "BasePredicate",
            "params": [
                {
                    "name": "attributePath",
                    "description": "The path to the attribute for predicate.",
                    "type": "String"
                }
            ],
            "is_constructor": 1
        },
        "Query.GeographyPredicate": {
            "name": "Query.GeographyPredicate",
            "shortname": "Query.GeographyPredicate",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ember-flexberry-data",
            "namespace": "Query",
            "file": "addon/query/predicate.js",
            "line": 295,
            "description": "The predicate class for geography attributes.",
            "extends": "BasePredicate",
            "params": [
                {
                    "name": "attributePath",
                    "description": "The path to the attribute for predicate.",
                    "type": "String"
                }
            ],
            "is_constructor": 1
        },
        "Query.GeometryPredicate": {
            "name": "Query.GeometryPredicate",
            "shortname": "Query.GeometryPredicate",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ember-flexberry-data",
            "namespace": "Query",
            "file": "addon/query/predicate.js",
            "line": 353,
            "description": "The predicate class for geometry attributes.",
            "extends": "BasePredicate",
            "params": [
                {
                    "name": "attributePath",
                    "description": "The path to the attribute for predicate.",
                    "type": "String"
                }
            ],
            "is_constructor": 1
        },
        "Query.DetailPredicate": {
            "name": "Query.DetailPredicate",
            "shortname": "Query.DetailPredicate",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ember-flexberry-data",
            "namespace": "Query",
            "file": "addon/query/predicate.js",
            "line": 411,
            "description": "The predicate class for details.",
            "extends": "BasePredicate",
            "params": [
                {
                    "name": "detailPath",
                    "description": "The path to the detail for predicate.",
                    "type": "String"
                }
            ],
            "is_constructor": 1
        },
        "Query.NotPredicate": {
            "name": "Query.NotPredicate",
            "shortname": "Query.NotPredicate",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ember-flexberry-data",
            "namespace": "Query",
            "file": "addon/query/predicate.js",
            "line": 522,
            "description": "The class of not predicate.",
            "extends": "BasePredicate",
            "params": [
                {
                    "name": "predicate",
                    "description": "Another predicate.",
                    "type": "Object"
                }
            ],
            "is_constructor": 1
        },
        "Query.IsOfPredicate": {
            "name": "Query.IsOfPredicate",
            "shortname": "Query.IsOfPredicate",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ember-flexberry-data",
            "namespace": "Query",
            "file": "addon/query/predicate.js",
            "line": 566,
            "description": "The predicate class that implements the isof function.\n\nIts constructor implements the following signatures:\n  - `new IsOfPredicate(typeName)`\n  - `new IsOfPredicate(expression, typeName)`\n\nWhere:\n  - `typeName` - type name to which the current instance will be assigned.\n  - `expression` - an expression relative to the current instance that must point to an object for assigning a type.",
            "extends": "BasePredicate",
            "params": [
                {
                    "name": "args",
                    "description": "",
                    "multiple": true
                }
            ],
            "is_constructor": 1
        },
        "Query.QueryObject": {
            "name": "Query.QueryObject",
            "shortname": "QueryObject",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ember-flexberry-data",
            "namespace": "Query",
            "file": "addon/query/query-object.js",
            "line": 10,
            "params": [
                {
                    "name": "modelName",
                    "description": "The model name of the requested entities.",
                    "type": "String"
                },
                {
                    "name": "id",
                    "description": "The id of the requested entity.",
                    "type": "String|Number"
                },
                {
                    "name": "projectionName",
                    "description": "The name of used projection for reading the requested entities.",
                    "type": "String"
                },
                {
                    "name": "predicate",
                    "description": "The predicate that contains filtering conditions for requested entities.",
                    "type": "BasePredicate"
                },
                {
                    "name": "order",
                    "description": "Ordering conditions for requested entities.",
                    "type": "OrderByClause"
                },
                {
                    "name": "top",
                    "description": "The number of items in the queried collection to be included in the result.",
                    "type": "Number"
                },
                {
                    "name": "skip",
                    "description": "The number of items in the queried collection that are to be skipped and not included in the result.",
                    "type": "Number"
                },
                {
                    "name": "count",
                    "description": "Flag indicates to request a count of the matching entities included with the entities in the response.",
                    "type": "Boolean"
                },
                {
                    "name": "expand",
                    "description": "Specifies the related entities to be included in line with retrieved entities.",
                    "type": "Object"
                },
                {
                    "name": "select",
                    "description": "A specific set of properties for each requested entity.",
                    "type": "Object"
                },
                {
                    "name": "primaryKeyName",
                    "description": "The name of primary key field for specified model name in modelName property.",
                    "type": "Object"
                },
                {
                    "name": "extend",
                    "description": "An additional computed set of properties for each requested entity. Based on properties in predicate and order, but not included in select and expand.",
                    "type": "Object"
                },
                {
                    "name": "customQueryParams",
                    "description": "An additional query parameters.",
                    "type": "Object"
                },
                {
                    "name": "dataType",
                    "description": "A data type for the request. Supported types: 'json' and 'blob'.",
                    "type": "String"
                }
            ],
            "is_constructor": 1
        },
        "Serializer.Base": {
            "name": "Serializer.Base",
            "shortname": "Serializer.Base",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ember-flexberry-data",
            "namespace": "Serializer",
            "file": "addon/serializers/base.js",
            "line": 6,
            "description": "Base serializer class."
        },
        "Serializer.OData": {
            "name": "Serializer.OData",
            "shortname": "Serializer.OData",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ember-flexberry-data",
            "namespace": "Serializer",
            "file": "addon/serializers/odata.js",
            "line": 7,
            "description": "Serializer class for OData."
        },
        "Serializer.Offline": {
            "name": "Serializer.Offline",
            "shortname": "Serializer.Offline",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ember-flexberry-data",
            "namespace": "Serializer",
            "file": "addon/serializers/offline.js",
            "line": 9,
            "description": "Base serializer for {{#crossLink \"Offline.LocalStore\"}}{{/crossLink}}.",
            "extends": "<a href=\"http://emberjs.com/api/data/classes/DS.JSONSerializer.html\">JSONSerializer</a>"
        },
        "Offline.DexieService": {
            "name": "Offline.DexieService",
            "shortname": "Offline.DexieService",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ember-flexberry-data",
            "namespace": "Offline",
            "file": "addon/services/dexie.js",
            "line": 11,
            "description": "Service for storing [Dexie](https://github.com/dfahlander/Dexie.js) instance for application.",
            "extends": "Ember.Service",
            "access": "public",
            "tagname": ""
        },
        "Offline.GlobalsService": {
            "name": "Offline.GlobalsService",
            "shortname": "Offline.GlobalsService",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ember-flexberry-data",
            "namespace": "Offline",
            "file": "addon/services/offline-globals.js",
            "line": 7,
            "description": "Service for operate with global online and offline properties and events.",
            "extends": "Ember.Service",
            "access": "public",
            "tagname": ""
        },
        "Offline.Syncer": {
            "name": "Offline.Syncer",
            "shortname": "Offline.Syncer",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ember-flexberry-data",
            "namespace": "Offline",
            "file": "addon/services/syncer.js",
            "line": 10,
            "extends": "Ember.Object"
        },
        "Offline.Store": {
            "name": "Offline.Store",
            "shortname": "Offline.Store",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ember-flexberry-data",
            "namespace": "Offline",
            "file": "addon/stores/base-store.js",
            "line": 9,
            "description": "Base class for application store.\nservice:store should point to instance of that class.",
            "extends": "<a href=\"http://emberjs.com/api/data/classes/DS.Store.html\">DS.Store</a>"
        },
        "Offline.LocalStore": {
            "name": "Offline.LocalStore",
            "shortname": "Offline.LocalStore",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ember-flexberry-data",
            "namespace": "Offline",
            "file": "addon/stores/local-store.js",
            "line": 10,
            "description": "Store that used in offline mode by default.",
            "extends": "<a href=\"http://emberjs.com/api/data/classes/DS.Store.html\">DS.Store</a>",
            "access": "private",
            "tagname": ""
        },
        "OData.OnlineStore": {
            "name": "OData.OnlineStore",
            "shortname": "OData.OnlineStore",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ember-flexberry-data",
            "namespace": "OData",
            "file": "addon/stores/online-store.js",
            "line": 8,
            "description": "Store that used in online mode by default.",
            "extends": "<a href=\"http://emberjs.com/api/data/classes/DS.Store.html\">DS.Store</a>",
            "access": "private",
            "tagname": ""
        },
        "DecimalTransform": {
            "name": "DecimalTransform",
            "shortname": "DecimalTransform",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ember-flexberry-data",
            "namespace": "",
            "file": "addon/transforms/decimal.js",
            "line": 8,
            "description": "Transformation for model's attributes defined as <a href=\"http://emberjs.com/api/data/#method_attr\">DS.attr</a> with type 'decimal'.\nIt extends <a href=\"http://emberjs.com/api/data/classes/DS.NumberTransform.html\">number transformation</a> from ember data.",
            "extends": "<a href=\"http://emberjs.com/api/data/classes/DS.NumberTransform.html\">DS.NumberTransform</a>",
            "example": [
                "\n```\nimport DS from 'ember-data';\nexport default DS.Model.extend({\n  name: DS.attr('string'),\n  decimalNumber: DS.attr('decimal')\n});\n```"
            ]
        },
        "FileTransform": {
            "name": "FileTransform",
            "shortname": "FileTransform",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ember-flexberry-data",
            "namespace": "",
            "file": "addon/transforms/file.js",
            "line": 7,
            "description": "Transformation for model's attributes defined as <a href=\"http://emberjs.com/api/data/#method_attr\">DS.attr</a> with type 'file'.\nTransformation is necessary in order to detach file attributes from another string attributes on model level.\nIt extends <a href=\"http://emberjs.com/api/data/classes/DS.StringTransform.html\">string transformation</a> from ember data,\nwithout any changes.",
            "extends": "<a href=\"http://emberjs.com/api/data/classes/DS.StringTransform.html\">DS.StringTransform</a>",
            "example": [
                "\n```\nimport DS from 'ember-data';\nexport default DS.Model.extend({\n  name: DS.attr('string'),\n  attachment: DS.attr('file')\n});\n```"
            ]
        },
        "FlexberryEnumTransform": {
            "name": "FlexberryEnumTransform",
            "shortname": "FlexberryEnumTransform",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ember-flexberry-data",
            "namespace": "",
            "file": "addon/transforms/flexberry-enum.js",
            "line": 9,
            "description": "Base transform class that implements an enumeration type.\nDuring serialization\\deserialization it converts values to captions and vise versa.",
            "extends": "<a href=\"http://emberjs.com/api/data/classes/DS.Transform.html\">DS.Transform</a>"
        },
        "GuidTransform": {
            "name": "GuidTransform",
            "shortname": "GuidTransform",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ember-flexberry-data",
            "namespace": "",
            "file": "addon/transforms/guid.js",
            "line": 8,
            "description": "Transformation for model's attributes defined as <a href=\"http://emberjs.com/api/data/#method_attr\">DS.attr</a> with type 'guid'.\nIt extends <a href=\"http://emberjs.com/api/data/classes/DS.NumberTransform.html\">number transformation</a> from ember data.",
            "extends": "<a href=\"http://emberjs.com/api/data/classes/DS.NumberTransform.html\">DS.NumberTransform</a>",
            "example": [
                "\n```\nimport DS from 'ember-data';\nexport default DS.Model.extend({\n  externalId: DS.attr('guid')\n});\n```"
            ]
        },
        "Projection": {
            "name": "Projection",
            "shortname": "Projection",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ember-flexberry-data",
            "namespace": "",
            "file": "addon/index.js",
            "line": 78,
            "description": "This namespace contains classes and methods for working with projections.",
            "static": 1,
            "access": "public",
            "tagname": ""
        },
        "Utils.Information": {
            "name": "Utils.Information",
            "shortname": "Utils.Information",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ember-flexberry-data",
            "namespace": "Utils",
            "file": "addon/utils/information.js",
            "line": 6,
            "description": "Class for loading metadata about models."
        },
        "Offline": {
            "name": "Offline",
            "shortname": "Offline",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ember-flexberry-data",
            "namespace": "",
            "file": "addon/index.js",
            "line": 62,
            "description": "This namespace contains classes to support work in offline mode.",
            "static": 1,
            "access": "public",
            "tagname": ""
        },
        "Adapter": {
            "name": "Adapter",
            "shortname": "Adapter",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ember-flexberry-data",
            "namespace": "",
            "file": "addon/index.js",
            "line": 95,
            "description": "This namespace contains base adapter classes for different kind of backends.",
            "static": 1,
            "access": "public",
            "tagname": ""
        },
        "Serializer": {
            "name": "Serializer",
            "shortname": "Serializer",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ember-flexberry-data",
            "namespace": "",
            "file": "addon/index.js",
            "line": 106,
            "description": "This namespace contains base serializer classes for different kind of backends.",
            "static": 1,
            "access": "public",
            "tagname": ""
        },
        "Query": {
            "name": "Query",
            "shortname": "Query",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ember-flexberry-data",
            "namespace": "",
            "file": "addon/index.js",
            "line": 118,
            "description": "This namespace contains implementation of Flexberry Query including adapters\nfor converting query object to requests for different kind of backends.",
            "static": 1,
            "access": "public",
            "tagname": ""
        },
        "Utils": {
            "name": "Utils",
            "shortname": "Utils",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ember-flexberry-data",
            "namespace": "",
            "file": "addon/index.js",
            "line": 149,
            "description": "This namespace contains helper claseses.",
            "static": 1,
            "access": "public",
            "tagname": ""
        },
        "Security": {
            "name": "Security",
            "shortname": "Security",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ember-flexberry-data",
            "namespace": "",
            "file": "addon/index.js",
            "line": 159,
            "description": "This namespace contains security claseses.",
            "static": 1,
            "access": "public",
            "tagname": ""
        },
        "Audit": {
            "name": "Audit",
            "shortname": "Audit",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ember-flexberry-data",
            "namespace": "",
            "file": "addon/index.js",
            "line": 169,
            "description": "This namespace contains audit claseses.",
            "static": 1,
            "access": "public",
            "tagname": ""
        }
    },
    "elements": {},
    "classitems": [
        {
            "file": "addon/adapters/odata.js",
            "line": 30,
            "description": "Timeout for AJAX-requests.",
            "itemtype": "property",
            "name": "timeout",
            "type": "Number",
            "default": "0",
            "class": "Adapter.OData",
            "module": "ember-flexberry-data",
            "namespace": "Adapter"
        },
        {
            "file": "addon/adapters/odata.js",
            "line": 39,
            "description": "Overloaded method from `RESTAdapter` (Ember Data).\nCalled by the sore in order to fetch data from the server.",
            "itemtype": "method",
            "name": "query",
            "params": [
                {
                    "name": "store",
                    "description": "",
                    "type": "DS.Store"
                },
                {
                    "name": "type",
                    "description": "",
                    "type": "DS.Model"
                },
                {
                    "name": "query",
                    "description": "Flexberry Query object.",
                    "type": "Query"
                }
            ],
            "return": {
                "description": "",
                "type": "Promise"
            },
            "class": "Adapter.OData",
            "module": "ember-flexberry-data",
            "namespace": "Adapter"
        },
        {
            "file": "addon/adapters/odata.js",
            "line": 69,
            "description": "Overloaded method from `RESTAdapter` (Ember Data).\nCustomizes ajax options for the requests.",
            "itemtype": "method",
            "name": "ajaxOptions",
            "params": [
                {
                    "name": "url",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "type",
                    "description": "",
                    "type": "DS.Model"
                },
                {
                    "name": "options",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "",
                "type": "Object"
            },
            "class": "Adapter.OData",
            "module": "ember-flexberry-data",
            "namespace": "Adapter"
        },
        {
            "file": "addon/adapters/odata.js",
            "line": 89,
            "description": "Takes an ajax response, and returns the json payload or an error.",
            "itemtype": "method",
            "name": "handleResponse",
            "params": [
                {
                    "name": "status",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "headers",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "payload",
                    "description": "",
                    "type": "Object"
                }
            ],
            "class": "Adapter.OData",
            "module": "ember-flexberry-data",
            "namespace": "Adapter"
        },
        {
            "file": "addon/adapters/odata.js",
            "line": 105,
            "description": "Overloaded method from `RESTAdapter` (Ember Data).\nCalled by the sore in order to fetch single record from the server.",
            "itemtype": "method",
            "name": "queryRecord",
            "params": [
                {
                    "name": "store",
                    "description": "",
                    "type": "DS.Store"
                },
                {
                    "name": "type",
                    "description": "",
                    "type": "DS.Model"
                },
                {
                    "name": "query",
                    "description": "",
                    "type": "Query"
                }
            ],
            "return": {
                "description": "promise",
                "type": "Promise"
            },
            "class": "Adapter.OData",
            "module": "ember-flexberry-data",
            "namespace": "Adapter"
        },
        {
            "file": "addon/adapters/odata.js",
            "line": 124,
            "description": "Overloaded method from `RESTAdapter` (Ember Data).\nCalled by the sore in order to fetch single record by ID from the server.",
            "itemtype": "method",
            "name": "findRecord",
            "params": [
                {
                    "name": "store",
                    "description": "",
                    "type": "DS.Store"
                },
                {
                    "name": "type",
                    "description": "",
                    "type": "DS.Model"
                },
                {
                    "name": "id",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "snapshot",
                    "description": "",
                    "type": "DS.Snapshot"
                }
            ],
            "return": {
                "description": "promise",
                "type": "Promise"
            },
            "class": "Adapter.OData",
            "module": "ember-flexberry-data",
            "namespace": "Adapter"
        },
        {
            "file": "addon/adapters/odata.js",
            "line": 144,
            "description": "Overloaded method from `RESTAdapter` (Ember Data).\nCalled by the sore in order to fetch all records from the server.",
            "itemtype": "method",
            "name": "findAll",
            "params": [
                {
                    "name": "store",
                    "description": "",
                    "type": "DS.Store"
                },
                {
                    "name": "type",
                    "description": "",
                    "type": "DS.Model"
                },
                {
                    "name": "sinceToken",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "snapshotRecordArray",
                    "description": "",
                    "type": "DS.SnapshotRecordArray"
                }
            ],
            "return": {
                "description": "promise",
                "type": "Promise"
            },
            "class": "Adapter.OData",
            "module": "ember-flexberry-data",
            "namespace": "Adapter"
        },
        {
            "file": "addon/adapters/odata.js",
            "line": 164,
            "description": "Overloaded method from `build-url-mixin` (Ember Data), that determines the pathname for a given type.\nAdditionally capitalizes the type name (requirement of Flexberry OData Server).",
            "itemtype": "method",
            "name": "pathForType",
            "params": [
                {
                    "name": "modelName",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "The path for a given type.",
                "type": "String"
            },
            "class": "Adapter.OData",
            "module": "ember-flexberry-data",
            "namespace": "Adapter"
        },
        {
            "file": "addon/adapters/odata.js",
            "line": 178,
            "description": "A method to make ajax requests.",
            "itemtype": "method",
            "name": "makeRequest",
            "params": [
                {
                    "name": "params",
                    "description": "",
                    "type": "Object"
                }
            ],
            "access": "public",
            "tagname": "",
            "class": "Adapter.OData",
            "module": "ember-flexberry-data",
            "namespace": "Adapter"
        },
        {
            "file": "addon/adapters/odata.js",
            "line": 190,
            "description": "A method to generate url for ajax request to odata function.",
            "params": [
                {
                    "name": "functionName",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "params",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "url",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "String"
            },
            "class": "Adapter.OData",
            "module": "ember-flexberry-data",
            "namespace": "Adapter"
        },
        {
            "file": "addon/adapters/odata.js",
            "line": 239,
            "description": "A method to generate url for ajax request to odata action.",
            "itemtype": "method",
            "name": "generateActionUrl",
            "params": [
                {
                    "name": "actionName",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "data",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "url",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "String"
            },
            "class": "Adapter.OData",
            "module": "ember-flexberry-data",
            "namespace": "Adapter"
        },
        {
            "file": "addon/adapters/odata.js",
            "line": 259,
            "description": "A method to call OData functions that returns model records using ajax request.",
            "itemtype": "method",
            "name": "callEmberOdataFunction",
            "params": [
                {
                    "name": "args",
                    "description": "Method arguments.",
                    "type": "Object",
                    "props": [
                        {
                            "name": "functionName",
                            "description": "OData functioin name (required).",
                            "type": "Object"
                        },
                        {
                            "name": "params",
                            "description": "OData function parameters.",
                            "type": "Object"
                        },
                        {
                            "name": "url",
                            "description": "Backend url.",
                            "type": "String"
                        },
                        {
                            "name": "fields",
                            "description": "Request's xhrFields.",
                            "type": "Object"
                        },
                        {
                            "name": "store",
                            "description": "Ember's store.",
                            "type": "Object"
                        },
                        {
                            "name": "modelName",
                            "description": "Model name.",
                            "type": "String"
                        },
                        {
                            "name": "modelProjection",
                            "description": "Model projection.",
                            "type": "String"
                        },
                        {
                            "name": "successCallback",
                            "description": "Success callback.",
                            "type": "Function"
                        },
                        {
                            "name": "failCallback",
                            "description": "Fail callback.",
                            "type": "Function"
                        },
                        {
                            "name": "alwaysCallback",
                            "description": "Always callback.",
                            "type": "Function"
                        }
                    ]
                }
            ],
            "return": {
                "description": "",
                "type": "Promise"
            },
            "class": "Adapter.OData",
            "module": "ember-flexberry-data",
            "namespace": "Adapter"
        },
        {
            "file": "addon/adapters/odata.js",
            "line": 289,
            "description": "A method to call OData functions using ajax request.",
            "itemtype": "method",
            "name": "callFunction",
            "params": [
                {
                    "name": "args",
                    "description": "Method arguments.",
                    "type": "Object",
                    "props": [
                        {
                            "name": "functionName",
                            "description": "OData functioin name (required).",
                            "type": "Object"
                        },
                        {
                            "name": "params",
                            "description": "OData function parameters.",
                            "type": "Object"
                        },
                        {
                            "name": "url",
                            "description": "Backend url.",
                            "type": "String"
                        },
                        {
                            "name": "fields",
                            "description": "Request's xhrFields.",
                            "type": "Object"
                        },
                        {
                            "name": "store",
                            "description": "Ember's store, needed when results are ember models.",
                            "type": "Object"
                        },
                        {
                            "name": "modelName",
                            "description": "Model name, needed when results are ember models.",
                            "type": "String"
                        },
                        {
                            "name": "modelProjection",
                            "description": "Model projection, needed when results are ember models.",
                            "type": "String"
                        },
                        {
                            "name": "successCallback",
                            "description": "Success callback.",
                            "type": "Function"
                        },
                        {
                            "name": "failCallback",
                            "description": "Fail callback.",
                            "type": "Function"
                        },
                        {
                            "name": "alwaysCallback",
                            "description": "Always callback.",
                            "type": "Function"
                        }
                    ]
                }
            ],
            "return": {
                "description": "",
                "type": "Promise"
            },
            "class": "Adapter.OData",
            "module": "ember-flexberry-data",
            "namespace": "Adapter"
        },
        {
            "file": "addon/adapters/odata.js",
            "line": 328,
            "description": "A method to call OData actions that returns model records using ajax request.",
            "itemtype": "method",
            "name": "callEmberOdataAction",
            "params": [
                {
                    "name": "args",
                    "description": "Method arguments.",
                    "type": "Object",
                    "props": [
                        {
                            "name": "actionName",
                            "description": "OData action name (required).",
                            "type": "Object"
                        },
                        {
                            "name": "data",
                            "description": "OData action data.",
                            "type": "Object"
                        },
                        {
                            "name": "url",
                            "description": "Backend url.",
                            "type": "String"
                        },
                        {
                            "name": "fields",
                            "description": "Request's xhrFields.",
                            "type": "Object"
                        },
                        {
                            "name": "store",
                            "description": "Ember's store.",
                            "type": "Object"
                        },
                        {
                            "name": "modelName",
                            "description": "Model name.",
                            "type": "String"
                        },
                        {
                            "name": "successCallback",
                            "description": "Success callback.",
                            "type": "Function"
                        },
                        {
                            "name": "failCallback",
                            "description": "Fail callback.",
                            "type": "Function"
                        },
                        {
                            "name": "alwaysCallback",
                            "description": "Always callback.",
                            "type": "Function"
                        }
                    ]
                }
            ],
            "return": {
                "description": "",
                "type": "Promise"
            },
            "class": "Adapter.OData",
            "module": "ember-flexberry-data",
            "namespace": "Adapter"
        },
        {
            "file": "addon/adapters/odata.js",
            "line": 357,
            "description": "A method to call OData actions using ajax request.",
            "itemtype": "method",
            "name": "callAction",
            "params": [
                {
                    "name": "args",
                    "description": "Method arguments.",
                    "type": "Object",
                    "props": [
                        {
                            "name": "actionName",
                            "description": "OData action name (required).",
                            "type": "Object"
                        },
                        {
                            "name": "data",
                            "description": "OData action data.",
                            "type": "Object"
                        },
                        {
                            "name": "url",
                            "description": "Backend url.",
                            "type": "String"
                        },
                        {
                            "name": "fields",
                            "description": "Request's xhrFields.",
                            "type": "Object"
                        },
                        {
                            "name": "store",
                            "description": "Ember's store, needed when results are ember models.",
                            "type": "Object"
                        },
                        {
                            "name": "modelName",
                            "description": "Model name, needed when results are ember models.",
                            "type": "String"
                        },
                        {
                            "name": "successCallback",
                            "description": "Success callback.",
                            "type": "Function"
                        },
                        {
                            "name": "failCallback",
                            "description": "Fail callback.",
                            "type": "Function"
                        },
                        {
                            "name": "alwaysCallback",
                            "description": "Always callback.",
                            "type": "Function"
                        }
                    ]
                }
            ],
            "return": {
                "description": "",
                "type": "Promise"
            },
            "class": "Adapter.OData",
            "module": "ember-flexberry-data",
            "namespace": "Adapter"
        },
        {
            "file": "addon/adapters/odata.js",
            "line": 390,
            "description": "A method to send batch update, create or delete models in single transaction.\n\nAll models saving using this method must have identifiers.\n\nThe array which fulfilled the promise may contain the following values:\n- `same model object` - for created, updated or unaltered records.\n- `null` - for deleted records.",
            "itemtype": "method",
            "name": "batchUpdate",
            "params": [
                {
                    "name": "store",
                    "description": "The store.",
                    "type": "DS.Store"
                },
                {
                    "name": "models",
                    "description": "Is array of models or single model for batch update.",
                    "type": "DS.Model[]|DS.Model"
                }
            ],
            "return": {
                "description": "A promise that fulfilled with an array of models in the new state.",
                "type": "Promise"
            },
            "class": "Adapter.OData",
            "module": "ember-flexberry-data",
            "namespace": "Adapter"
        },
        {
            "file": "addon/adapters/odata.js",
            "line": 574,
            "description": "A method to generate url part from queryParams.",
            "itemtype": "method",
            "name": "_generateFunctionQueryString",
            "params": [
                {
                    "name": "queryParams",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "store",
                    "description": "",
                    "type": "DS.Store"
                }
            ],
            "return": {
                "description": "",
                "type": "String"
            },
            "access": "private",
            "tagname": "",
            "class": "Adapter.OData",
            "module": "ember-flexberry-data",
            "namespace": "Adapter"
        },
        {
            "file": "addon/adapters/odata.js",
            "line": 594,
            "description": "A method to make args object function/action call method's.",
            "itemtype": "method",
            "name": "_getODataArgs",
            "params": [
                {
                    "name": "params",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "isEmber",
                    "description": "",
                    "type": "Boolean"
                },
                {
                    "name": "isAction",
                    "description": "",
                    "type": "Boolean"
                }
            ],
            "return": {
                "description": "",
                "type": "Object"
            },
            "access": "private",
            "tagname": "",
            "class": "Adapter.OData",
            "module": "ember-flexberry-data",
            "namespace": "Adapter"
        },
        {
            "file": "addon/adapters/odata.js",
            "line": 623,
            "description": "A method to make ajax requests.",
            "params": [
                {
                    "name": "params",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "store",
                    "description": "",
                    "type": "Store"
                },
                {
                    "name": "modelname",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "successCallback",
                    "description": "",
                    "type": "Function"
                },
                {
                    "name": "failCallback",
                    "description": "",
                    "type": "Function"
                },
                {
                    "name": "alwaysCallback",
                    "description": "",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "",
                "type": "Promise"
            },
            "access": "private",
            "tagname": "",
            "class": "Adapter.OData",
            "module": "ember-flexberry-data",
            "namespace": "Adapter"
        },
        {
            "file": "addon/adapters/odata.js",
            "line": 732,
            "description": "Overloaded method from `build-url-mixin` (Ember Data), taht builds URL to OData feed.\nAppends id as `(id)` (OData specification) instead of `/id`.",
            "itemtype": "method",
            "name": "_buildURL",
            "params": [
                {
                    "name": "modelName",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "id",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "String"
            },
            "access": "private",
            "tagname": "",
            "class": "Adapter.OData",
            "module": "ember-flexberry-data",
            "namespace": "Adapter"
        },
        {
            "file": "addon/adapters/odata.js",
            "line": 772,
            "description": "Appends id to URL according to the OData specification.",
            "itemtype": "method",
            "name": "_appendIdToURL",
            "params": [
                {
                    "name": "id",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "url",
                    "description": "",
                    "type": "String"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "Adapter.OData",
            "module": "ember-flexberry-data",
            "namespace": "Adapter"
        },
        {
            "file": "addon/adapters/odata.js",
            "line": 823,
            "description": "Makes HTTP request for creating, updating or deleting the record.",
            "itemtype": "method",
            "name": "_sendRecord",
            "access": "private",
            "tagname": "",
            "class": "Adapter.OData",
            "module": "ember-flexberry-data",
            "namespace": "Adapter"
        },
        {
            "file": "addon/adapters/offline.js",
            "line": 31,
            "description": "If you would like your adapter to use a custom serializer you can set the defaultSerializer property to be the name of the custom serializer.\n[More info](http://emberjs.com/api/data/classes/DS.Adapter.html#property_defaultSerializer).",
            "itemtype": "property",
            "name": "defaultSerializer",
            "type": "String",
            "default": "'offline'",
            "class": "Adapter.Offline",
            "module": "ember-flexberry-data",
            "namespace": "Adapter"
        },
        {
            "file": "addon/adapters/offline.js",
            "line": 41,
            "description": "Database name for IndexedDB.",
            "itemtype": "property",
            "name": "dbName",
            "type": "String",
            "default": "'ember-flexberry-data'",
            "class": "Adapter.Offline",
            "module": "ember-flexberry-data",
            "namespace": "Adapter"
        },
        {
            "file": "addon/adapters/offline.js",
            "line": 50,
            "description": "Instance of dexie service.",
            "itemtype": "property",
            "name": "dexieService",
            "type": "Offline.DexieService",
            "class": "Adapter.Offline",
            "module": "ember-flexberry-data",
            "namespace": "Adapter"
        },
        {
            "file": "addon/adapters/offline.js",
            "line": 58,
            "description": "Generate globally unique IDs for records.",
            "itemtype": "method",
            "name": "generateIdForRecord",
            "params": [
                {
                    "name": "store",
                    "description": "",
                    "type": "DS.Store"
                },
                {
                    "name": "type",
                    "description": "",
                    "type": "DS.Model"
                },
                {
                    "name": "inputProperties",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "",
                "type": "String"
            },
            "class": "Adapter.Offline",
            "module": "ember-flexberry-data",
            "namespace": "Adapter"
        },
        {
            "file": "addon/adapters/offline.js",
            "line": 69,
            "description": "Clear tables in IndexedDB database, if `table` not specified, clear all tables.",
            "itemtype": "method",
            "name": "clear",
            "params": [
                {
                    "name": "table",
                    "description": "Table name.",
                    "type": "String",
                    "optional": true
                }
            ],
            "return": {
                "description": "",
                "type": "Promise"
            },
            "class": "Adapter.Offline",
            "module": "ember-flexberry-data",
            "namespace": "Adapter"
        },
        {
            "file": "addon/adapters/offline.js",
            "line": 87,
            "description": "Delete IndexedDB database.",
            "itemtype": "method",
            "name": "delete",
            "return": {
                "description": "",
                "type": "Promise"
            },
            "class": "Adapter.Offline",
            "module": "ember-flexberry-data",
            "namespace": "Adapter"
        },
        {
            "file": "addon/adapters/offline.js",
            "line": 97,
            "description": "The `findRecord()` method is invoked when the store is asked for a record that has not previously been loaded.\n[More info](http://emberjs.com/api/data/classes/DS.Adapter.html#method_findRecord).",
            "itemtype": "method",
            "name": "findRecord",
            "params": [
                {
                    "name": "store",
                    "description": "",
                    "type": "DS.Store"
                },
                {
                    "name": "type",
                    "description": "",
                    "type": "DS.Model"
                },
                {
                    "name": "id",
                    "description": "",
                    "type": "String|Integer"
                }
            ],
            "return": {
                "description": "",
                "type": "Promise"
            },
            "class": "Adapter.Offline",
            "module": "ember-flexberry-data",
            "namespace": "Adapter"
        },
        {
            "file": "addon/adapters/offline.js",
            "line": 113,
            "description": "The `findAll()` method is used to retrieve all records for a given type.\n[More info](http://emberjs.com/api/data/classes/DS.Adapter.html#method_findAll).",
            "itemtype": "method",
            "name": "findAll",
            "params": [
                {
                    "name": "store",
                    "description": "",
                    "type": "DS.Store"
                },
                {
                    "name": "type",
                    "description": "",
                    "type": "DS.Model"
                }
            ],
            "return": {
                "description": "",
                "type": "Promise"
            },
            "class": "Adapter.Offline",
            "module": "ember-flexberry-data",
            "namespace": "Adapter"
        },
        {
            "file": "addon/adapters/offline.js",
            "line": 128,
            "description": "Find multiple records at once if coalesceFindRequests is true.\n[More info](http://emberjs.com/api/data/classes/DS.Adapter.html#method_findMany).",
            "itemtype": "method",
            "name": "findMany",
            "params": [
                {
                    "name": "store",
                    "description": "",
                    "type": "DS.Store"
                },
                {
                    "name": "type",
                    "description": "",
                    "type": "DS.Model"
                },
                {
                    "name": "ids",
                    "description": "",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "",
                "type": "Promise"
            },
            "class": "Adapter.Offline",
            "module": "ember-flexberry-data",
            "namespace": "Adapter"
        },
        {
            "file": "addon/adapters/offline.js",
            "line": 152,
            "description": "The `queryRecord()` method is invoked when the store is asked for a single record through a query object.\n[More info](http://emberjs.com/api/data/classes/DS.Adapter.html#method_queryRecord).",
            "itemtype": "method",
            "name": "queryRecord",
            "params": [
                {
                    "name": "store",
                    "description": "",
                    "type": "DS.Store"
                },
                {
                    "name": "type",
                    "description": "",
                    "type": "DS.Model"
                },
                {
                    "name": "query",
                    "description": "",
                    "type": "Object|QueryObject"
                }
            ],
            "return": {
                "description": "",
                "type": "Promise"
            },
            "class": "Adapter.Offline",
            "module": "ember-flexberry-data",
            "namespace": "Adapter"
        },
        {
            "file": "addon/adapters/offline.js",
            "line": 166,
            "description": "This method is called when you call `query` on the store.\n[More info](http://emberjs.com/api/data/classes/DS.Adapter.html#method_query).\n\nSupports {{#crossLink \"Query.QueryObject\"}}{{/crossLink}} instance or objects that look like this:\n  ```javascript\n  {\n    ...\n    <property to query>: <value to match>,\n    //and\n    <property to query>: <value to match>,\n    ...\n  }\n  ```",
            "itemtype": "method",
            "name": "query",
            "params": [
                {
                    "name": "store",
                    "description": "",
                    "type": "DS.Store"
                },
                {
                    "name": "type",
                    "description": "",
                    "type": "DS.Model"
                },
                {
                    "name": "query",
                    "description": "",
                    "type": "Object|QueryObject"
                }
            ],
            "return": {
                "description": "",
                "type": "Promise"
            },
            "class": "Adapter.Offline",
            "module": "ember-flexberry-data",
            "namespace": "Adapter"
        },
        {
            "file": "addon/adapters/offline.js",
            "line": 206,
            "description": "Implement this method in a subclass to handle the creation of new records.\n[More info](http://emberjs.com/api/data/classes/DS.Adapter.html#method_createRecord).",
            "itemtype": "method",
            "name": "createRecord",
            "params": [
                {
                    "name": "store",
                    "description": "",
                    "type": "DS.Store"
                },
                {
                    "name": "type",
                    "description": "",
                    "type": "DS.Model"
                },
                {
                    "name": "snapshot",
                    "description": "",
                    "type": "DS.Snapshot"
                }
            ],
            "return": {
                "description": "",
                "type": "Promise"
            },
            "class": "Adapter.Offline",
            "module": "ember-flexberry-data",
            "namespace": "Adapter"
        },
        {
            "file": "addon/adapters/offline.js",
            "line": 231,
            "description": "Implement this method in a subclass to handle the updating of a record.\n[More info](http://emberjs.com/api/data/classes/DS.Adapter.html#method_updateRecord).",
            "itemtype": "method",
            "name": "updateRecord",
            "params": [
                {
                    "name": "store",
                    "description": "",
                    "type": "DS.Store"
                },
                {
                    "name": "type",
                    "description": "",
                    "type": "DS.Model"
                },
                {
                    "name": "snapshot",
                    "description": "",
                    "type": "DS.Snapshot"
                }
            ],
            "return": {
                "description": "",
                "type": "Promise"
            },
            "class": "Adapter.Offline",
            "module": "ember-flexberry-data",
            "namespace": "Adapter"
        },
        {
            "file": "addon/adapters/offline.js",
            "line": 256,
            "description": "Implement this method in a subclass to handle the deletion of a record.\n[More info](http://emberjs.com/api/data/classes/DS.Adapter.html#method_deleteRecord).",
            "itemtype": "method",
            "name": "deleteRecord",
            "params": [
                {
                    "name": "store",
                    "description": "",
                    "type": "DS.Store"
                },
                {
                    "name": "type",
                    "description": "",
                    "type": "DS.Model"
                },
                {
                    "name": "snapshot",
                    "description": "",
                    "type": "DS.Snapshot"
                }
            ],
            "return": {
                "description": "",
                "type": "Promise"
            },
            "class": "Adapter.Offline",
            "module": "ember-flexberry-data",
            "namespace": "Adapter"
        },
        {
            "file": "addon/adapters/offline.js",
            "line": 278,
            "description": "Create record if it does not exist, or update changed fields of record.",
            "itemtype": "method",
            "name": "updateOrCreate",
            "params": [
                {
                    "name": "store",
                    "description": "",
                    "type": "DS.Store"
                },
                {
                    "name": "type",
                    "description": "",
                    "type": "DS.Model"
                },
                {
                    "name": "snapshot",
                    "description": "",
                    "type": "DS.Snapshot"
                },
                {
                    "name": "fieldsToUpdate",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "",
                "type": "Promise"
            },
            "class": "Adapter.Offline",
            "module": "ember-flexberry-data",
            "namespace": "Adapter"
        },
        {
            "file": "addon/adapters/offline.js",
            "line": 316,
            "description": "Stores record's hash for performing bulk operaion with {{#crossLink \"Adapter.Offline/bulkUpdateOrCreate:method\"}} method.",
            "itemtype": "method",
            "name": "addHashForBulkUpdateOrCreate",
            "params": [
                {
                    "name": "store",
                    "description": "",
                    "type": "DS.Store"
                },
                {
                    "name": "type",
                    "description": "",
                    "type": "DS.Model"
                },
                {
                    "name": "snapshot",
                    "description": "",
                    "type": "DS.Snapshot"
                },
                {
                    "name": "fieldsToUpdate",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "syncDownTime",
                    "description": "",
                    "type": "Boolean"
                }
            ],
            "return": {
                "description": "",
                "type": "Promise"
            },
            "class": "Adapter.Offline",
            "module": "ember-flexberry-data",
            "namespace": "Adapter"
        },
        {
            "file": "addon/adapters/offline.js",
            "line": 380,
            "description": "Performing bulk operaion with previously stored hashes.",
            "itemtype": "method",
            "name": "bulkUpdateOrCreate",
            "params": [
                {
                    "name": "store",
                    "description": "",
                    "type": "DS.Store"
                },
                {
                    "name": "replaceIfExist",
                    "description": "If set to `true` then hashes will be replaced in store if they already exist",
                    "type": "Boolean"
                },
                {
                    "name": "clearHashesOnTransactionFail",
                    "description": "If set to `true` then previously stored hashes will be cleared if transaction with bulk operations fails",
                    "type": "Boolean"
                }
            ],
            "return": {
                "description": "",
                "type": "Promise"
            },
            "class": "Adapter.Offline",
            "module": "ember-flexberry-data",
            "namespace": "Adapter"
        },
        {
            "file": "addon/adapters/offline.js",
            "line": 431,
            "description": "Performing batch update operaion.",
            "itemtype": "method",
            "name": "batchUpdate",
            "params": [
                {
                    "name": "store",
                    "description": "",
                    "type": "DS.Store"
                },
                {
                    "name": "models",
                    "description": "Is array of models or single model for batch update.",
                    "type": "DS.Model[]|DS.Model"
                }
            ],
            "return": {
                "description": "",
                "type": "Promise"
            },
            "class": "Adapter.Offline",
            "module": "ember-flexberry-data",
            "namespace": "Adapter"
        },
        {
            "file": "addon/adapters/offline.js",
            "line": 531,
            "description": "Stores hash for performing bulk operaion into map.",
            "itemtype": "method",
            "name": "_storeHashForBulkOperation",
            "params": [
                {
                    "name": "modelName",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "hash",
                    "description": "",
                    "type": "Object"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "Adapter.Offline",
            "module": "ember-flexberry-data",
            "namespace": "Adapter"
        },
        {
            "file": "addon/adapters/offline.js",
            "line": 549,
            "description": "Makes {{#crossLink \"Query.QueryObject\"}}{{/crossLink}} out of queries that look like this:\n {\n   <property to query>: <value to match>,\n   ...\n }.",
            "itemtype": "method",
            "name": "_makeQueryObject",
            "params": [
                {
                    "name": "store",
                    "description": "Store used for making query"
                },
                {
                    "name": "modelName",
                    "description": "The name of the model type.",
                    "type": "String"
                },
                {
                    "name": "query",
                    "description": "Query parameters.",
                    "type": "Object"
                },
                {
                    "name": "projection",
                    "description": "Projection for query.",
                    "type": "Object|String",
                    "optional": true
                }
            ],
            "return": {
                "description": "Query object for IndexedDB adapter.",
                "type": "QueryObject"
            },
            "access": "private",
            "tagname": "",
            "class": "Adapter.Offline",
            "module": "ember-flexberry-data",
            "namespace": "Adapter"
        },
        {
            "file": "addon/adapters/offline.js",
            "line": 600,
            "description": "Retrieves projection from query and returns it.\nRetrieved projection removes from the query.",
            "itemtype": "method",
            "name": "_extractProjectionFromQuery",
            "params": [
                {
                    "name": "modelName",
                    "description": "The name of the model type.",
                    "type": "String"
                },
                {
                    "name": "typeClass",
                    "description": "Model type.",
                    "type": "subclass of DS.Model"
                },
                {
                    "name": "query",
                    "description": "Query parameters.",
                    "type": "Object",
                    "optional": true,
                    "props": [
                        {
                            "name": "projection",
                            "description": "Projection name.",
                            "type": "String",
                            "optional": true
                        }
                    ]
                }
            ],
            "return": {
                "description": "Extracted projection from query or null\n                 if projection is not set in query.",
                "type": "Object"
            },
            "access": "private",
            "tagname": "",
            "class": "Adapter.Offline",
            "module": "ember-flexberry-data",
            "namespace": "Adapter"
        },
        {
            "file": "addon/initializers/flexberry-enum.js",
            "line": 5,
            "description": "Registers some options for 'enum' type (to force application not to instantiate enums).",
            "itemtype": "method",
            "name": "flexberryEnum.initialize",
            "params": [
                {
                    "name": "application",
                    "description": "Ember application.",
                    "type": "<a href=\"http://emberjs.com/api/classes/Ember.Application.html\">Ember.Application</a>"
                }
            ],
            "class": "ApplicationInitializer",
            "module": "ember-flexberry-data"
        },
        {
            "file": "addon/mixins/regenerated/serializers/i-c-s-soft-s-t-o-r-m-n-e-t-business-audit-objects-audit-entity.js",
            "line": 10,
            "description": "Field name where object identifier is kept.",
            "class": "Projection.AdapterMixin",
            "module": "ember-flexberry-data"
        },
        {
            "file": "addon/mixins/regenerated/serializers/i-c-s-soft-s-t-o-r-m-n-e-t-business-audit-objects-audit-field.js",
            "line": 9,
            "description": "Field name where object identifier is kept.",
            "class": "Projection.AdapterMixin",
            "module": "ember-flexberry-data"
        },
        {
            "file": "addon/mixins/regenerated/serializers/i-c-s-soft-s-t-o-r-m-n-e-t-business-audit-objects-object-type.js",
            "line": 7,
            "description": "Field name where object identifier is kept.",
            "class": "Projection.AdapterMixin",
            "module": "ember-flexberry-data"
        },
        {
            "file": "addon/mixins/regenerated/serializers/i-c-s-soft-s-t-o-r-m-n-e-t-security-agent.js",
            "line": 7,
            "description": "Field name where object identifier is kept.",
            "class": "Projection.AdapterMixin",
            "module": "ember-flexberry-data"
        },
        {
            "file": "addon/mixins/regenerated/serializers/i-c-s-soft-s-t-o-r-m-n-e-t-security-link-group.js",
            "line": 9,
            "description": "Field name where object identifier is kept.",
            "class": "Projection.AdapterMixin",
            "module": "ember-flexberry-data"
        },
        {
            "file": "addon/mixins/regenerated/serializers/i-c-s-soft-s-t-o-r-m-n-e-t-security-session.js",
            "line": 7,
            "description": "Field name where object identifier is kept.",
            "class": "Projection.AdapterMixin",
            "module": "ember-flexberry-data"
        },
        {
            "file": "addon/mixins/adapter.js",
            "line": 13,
            "description": "Builds a URL for a given type and query.\nOptionally, it supports an ID in the query parameters for fetching\na definite record.\n\nSee {{#crossLink \"DS.BuildURLMixin/urlForQueryRecord:method\"}}{{/crossLink}}\nfor details.",
            "itemtype": "method",
            "name": "urlForQueryRecord",
            "access": "public",
            "tagname": "",
            "params": [
                {
                    "name": "query",
                    "description": "Query parameters.",
                    "type": "Object",
                    "props": [
                        {
                            "name": "id",
                            "description": "ID of a record.",
                            "type": "String",
                            "optional": true
                        }
                    ]
                },
                {
                    "name": "modelName",
                    "description": "Record type.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "url URL for query a record.",
                "type": "String"
            },
            "class": "Projection.AdapterMixin",
            "module": "ember-flexberry-data",
            "namespace": "Projection"
        },
        {
            "file": "addon/mixins/audit-model.js",
            "line": 9,
            "description": "Creation date and time of model.",
            "itemtype": "property",
            "name": "createTime",
            "type": "Date",
            "class": "CopyableMixin",
            "module": "ember-flexberry-data"
        },
        {
            "file": "addon/mixins/audit-model.js",
            "line": 17,
            "description": "Name of user who created model.",
            "itemtype": "property",
            "name": "creator",
            "type": "String",
            "class": "CopyableMixin",
            "module": "ember-flexberry-data"
        },
        {
            "file": "addon/mixins/audit-model.js",
            "line": 25,
            "description": "Date and time of last changes in model.",
            "itemtype": "property",
            "name": "editTime",
            "type": "Date",
            "class": "CopyableMixin",
            "module": "ember-flexberry-data"
        },
        {
            "file": "addon/mixins/audit-model.js",
            "line": 33,
            "description": "Name of user who changed model last time.",
            "itemtype": "property",
            "name": "editor",
            "type": "String",
            "class": "CopyableMixin",
            "module": "ember-flexberry-data"
        },
        {
            "file": "addon/mixins/audit-model.js",
            "line": 41,
            "description": "Name of current user.",
            "itemtype": "property",
            "name": "currentUserName",
            "readonly": "",
            "class": "CopyableMixin",
            "module": "ember-flexberry-data"
        },
        {
            "file": "addon/mixins/audit-model.js",
            "line": 52,
            "description": "Save the record and persist any changes to the record to an external source via the adapter.\n[More info](http://emberjs.com/api/data/classes/DS.Model.html#method_save).",
            "itemtype": "method",
            "name": "save",
            "params": [
                {
                    "name": "options",
                    "description": "",
                    "type": "Object",
                    "optional": true
                }
            ],
            "return": {
                "description": "",
                "type": "Promise"
            },
            "class": "CopyableMixin",
            "module": "ember-flexberry-data"
        },
        {
            "file": "addon/mixins/copyable.js",
            "line": 12,
            "description": "The default projection name to be used when creating record by prototype.",
            "itemtype": "property",
            "name": "prototypeProjection",
            "type": "String",
            "class": "CopyableMixin",
            "module": "ember-flexberry-data"
        },
        {
            "file": "addon/mixins/copyable.js",
            "line": 20,
            "description": "Creates a new record using base model instance with the specified\nor default projection as prototype.",
            "itemtype": "method",
            "name": "copy",
            "params": [
                {
                    "name": "prototypeProjection",
                    "description": "Optional projection name to be used when creating record by prototype.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "promise",
                "type": "Promise"
            },
            "class": "CopyableMixin",
            "module": "ember-flexberry-data"
        },
        {
            "file": "addon/mixins/offline-model.js",
            "line": 25,
            "description": "Date and time of last sync down of model.",
            "itemtype": "property",
            "name": "syncDownTime",
            "type": "Date",
            "class": "Offline.ModelMixin",
            "module": "ember-flexberry-data",
            "namespace": "Offline"
        },
        {
            "file": "addon/mixins/offline-model.js",
            "line": 33,
            "description": "Flag to indicate that model synchronized in readonly mode.\nReadonly mode allows to prevent any modifications of model on client side or server side.",
            "itemtype": "property",
            "name": "readOnly",
            "type": "Boolean",
            "readonly": "",
            "class": "Offline.ModelMixin",
            "module": "ember-flexberry-data",
            "namespace": "Offline"
        },
        {
            "file": "addon/mixins/offline-model.js",
            "line": 43,
            "description": "Global instance of Syncer that contains methods to sync model up and down.",
            "itemtype": "property",
            "name": "syncer",
            "type": "Syncer",
            "readonly": "",
            "class": "Offline.ModelMixin",
            "module": "ember-flexberry-data",
            "namespace": "Offline"
        },
        {
            "file": "addon/mixins/offline-model.js",
            "line": 52,
            "description": "Save the record and persist any changes to the record to an external source via the adapter.\n[More info](http://emberjs.com/api/data/classes/DS.Model.html#method_save).",
            "itemtype": "method",
            "name": "save",
            "params": [
                {
                    "name": "options",
                    "description": "",
                    "type": "Object",
                    "optional": true
                }
            ],
            "return": {
                "description": "",
                "type": "Promise"
            },
            "class": "Offline.ModelMixin",
            "module": "ember-flexberry-data",
            "namespace": "Offline"
        },
        {
            "file": "addon/mixins/store.js",
            "line": 15,
            "itemtype": "method",
            "name": "query",
            "params": [
                {
                    "name": "modelName",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "query",
                    "description": "an opaque query to be used by the adapter",
                    "type": "Any"
                }
            ],
            "return": {
                "description": "promise",
                "type": "Promise"
            },
            "class": "Projection.StoreMixin",
            "module": "ember-flexberry-data",
            "namespace": "Projection"
        },
        {
            "file": "addon/mixins/store.js",
            "line": 39,
            "itemtype": "method",
            "name": "queryRecord",
            "params": [
                {
                    "name": "modelName",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "query",
                    "description": "an opaque query to be used by the adapter",
                    "type": "Any"
                }
            ],
            "return": {
                "description": "promise",
                "type": "Promise"
            },
            "class": "Projection.StoreMixin",
            "module": "ember-flexberry-data",
            "namespace": "Projection"
        },
        {
            "file": "addon/mixins/store.js",
            "line": 52,
            "description": "Finds all records for the given model type.\n\nSee {{#crossLink \"DS.Store/findAll:method\"}}{{/crossLink}} for details.",
            "itemtype": "method",
            "name": "findAll",
            "access": "public",
            "tagname": "",
            "params": [
                {
                    "name": "modelName",
                    "description": "The name of the model type.",
                    "type": "String"
                },
                {
                    "name": "options",
                    "description": "Options.",
                    "type": "Object",
                    "optional": true,
                    "props": [
                        {
                            "name": "projection",
                            "description": "Projection name.",
                            "type": "String"
                        }
                    ]
                }
            ],
            "return": {
                "description": "Records promise.",
                "type": "DS.AdapterPopulatedRecordArray"
            },
            "class": "Projection.StoreMixin",
            "module": "ember-flexberry-data",
            "namespace": "Projection"
        },
        {
            "file": "addon/mixins/store.js",
            "line": 84,
            "description": "Returns a record for a given type and id combination.\n\nSee {{#crossLink \"DS.Store/findRecord:method\"}}{{/crossLink}} for details.",
            "itemtype": "method",
            "name": "findRecord",
            "access": "public",
            "tagname": "",
            "params": [
                {
                    "name": "modelName",
                    "description": "The name of the model type.",
                    "type": "String"
                },
                {
                    "name": "id",
                    "description": "Record ID.",
                    "type": "String|Integer"
                },
                {
                    "name": "options",
                    "description": "Options.",
                    "type": "Object",
                    "optional": true,
                    "props": [
                        {
                            "name": "projection",
                            "description": "Projection name.",
                            "type": "String"
                        }
                    ]
                }
            ],
            "return": {
                "description": "Record promise.",
                "type": "Promise"
            },
            "class": "Projection.StoreMixin",
            "module": "ember-flexberry-data",
            "namespace": "Projection"
        },
        {
            "file": "addon/models/model.js",
            "line": 25,
            "description": "Stored canonical `belongsTo` relationships.",
            "itemtype": "property",
            "name": "_canonicalBelongsTo",
            "type": "Object",
            "access": "private",
            "tagname": "",
            "class": "Projection.Model",
            "module": "ember-flexberry-data",
            "namespace": "Projection"
        },
        {
            "file": "addon/models/model.js",
            "line": 34,
            "description": "Model validation rules.",
            "itemtype": "property",
            "name": "validations",
            "type": "Object",
            "default": "{}",
            "class": "Projection.Model",
            "module": "ember-flexberry-data",
            "namespace": "Projection"
        },
        {
            "file": "addon/models/model.js",
            "line": 43,
            "description": "Flag that indicates sync up process of model is processing.",
            "itemtype": "property",
            "name": "isSyncingUp",
            "type": "Boolean",
            "default": "false",
            "class": "Projection.Model",
            "module": "ember-flexberry-data",
            "namespace": "Projection"
        },
        {
            "file": "addon/models/model.js",
            "line": 52,
            "description": "Flag that indicates model is created during sync up process.",
            "itemtype": "property",
            "name": "isCreatedDuringSyncUp",
            "type": "Boolean",
            "default": "false",
            "class": "Projection.Model",
            "module": "ember-flexberry-data",
            "namespace": "Projection"
        },
        {
            "file": "addon/models/model.js",
            "line": 61,
            "description": "Flag that indicates model is updated last time during sync up process.",
            "itemtype": "property",
            "name": "isCreatedDuringSyncUp",
            "type": "Boolean",
            "default": "false",
            "class": "Projection.Model",
            "module": "ember-flexberry-data",
            "namespace": "Projection"
        },
        {
            "file": "addon/models/model.js",
            "line": 70,
            "description": "Flag that indicates model is destroyed during sync up process.",
            "itemtype": "property",
            "name": "isCreatedDuringSyncUp",
            "type": "Boolean",
            "default": "false",
            "class": "Projection.Model",
            "module": "ember-flexberry-data",
            "namespace": "Projection"
        },
        {
            "file": "addon/models/model.js",
            "line": 79,
            "description": "Checks that model satisfies validation rules defined in 'validations' property.",
            "itemtype": "method",
            "name": "validate",
            "params": [
                {
                    "name": "options",
                    "description": "Method options",
                    "type": "Object",
                    "optional": true,
                    "props": [
                        {
                            "name": "validateDeleted",
                            "description": "Flag: indicates whether to validate model, if it is deleted, or not",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": " true"
                        }
                    ]
                }
            ],
            "return": {
                "description": "A promise that will be resolved if model satisfies validation rules defined in 'validations' property",
                "type": "Promise"
            },
            "class": "Projection.Model",
            "module": "ember-flexberry-data",
            "namespace": "Projection"
        },
        {
            "file": "addon/models/model.js",
            "line": 129,
            "description": "Triggers model's 'preSave' event & allows to execute some additional async logic before model will be saved.",
            "itemtype": "method",
            "name": "beforeSave",
            "params": [
                {
                    "name": "options",
                    "description": "Method options",
                    "type": "Object",
                    "optional": true,
                    "props": [
                        {
                            "name": "softSave",
                            "description": "Flag: indicates whether following 'save' will be soft\n(without sending a request to server) or not",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": " false"
                        },
                        {
                            "name": "promises",
                            "description": "Array to which 'preSave' event handlers could add some asynchronous operations promises",
                            "type": "Promise[]",
                            "optional": true
                        }
                    ]
                }
            ],
            "return": {
                "description": "A promise that will be resolved after all 'preSave' event handlers promises will be resolved",
                "type": "Promise"
            },
            "class": "Projection.Model",
            "module": "ember-flexberry-data",
            "namespace": "Projection"
        },
        {
            "file": "addon/models/model.js",
            "line": 162,
            "description": "Validates model, triggers 'preSave' event, and finally saves model.",
            "itemtype": "method",
            "name": "save",
            "params": [
                {
                    "name": "options",
                    "description": "Method options",
                    "type": "Object",
                    "optional": true,
                    "props": [
                        {
                            "name": "softSave",
                            "description": "Flag: indicates whether following 'save' will be soft\n(without sending a request to server) or not",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": " false"
                        }
                    ]
                }
            ],
            "return": {
                "description": "A promise that will be resolved after model will be successfully saved",
                "type": "Promise"
            },
            "class": "Projection.Model",
            "module": "ember-flexberry-data",
            "namespace": "Projection"
        },
        {
            "file": "addon/models/model.js",
            "line": 205,
            "description": "Turns model into 'updated.uncommitted' state.\n\nTransition into the `updated.uncommitted` state\nif the model in the `saved` state (no local changes).\nAlternative: this.get('currentState').becomeDirty();",
            "itemtype": "method",
            "name": "makeDirty",
            "class": "Projection.Model",
            "module": "ember-flexberry-data",
            "namespace": "Projection"
        },
        {
            "file": "addon/models/model.js",
            "line": 218,
            "description": "Return object with changes.\n\nObject will have structure:\n* key - is name relationships that has changed\n  * array - include two array, array with index `0` this old values, array with index `1` this new values.",
            "example": [
                "\n  ```javascript\n  {\n    key: [\n      [oldValues],\n      [newValues],\n    ],\n  }\n  ```"
            ],
            "itemtype": "method",
            "name": "changedHasMany",
            "return": {
                "description": "Object with changes, empty object if no change.",
                "type": "Object"
            },
            "class": "Projection.Model",
            "module": "ember-flexberry-data",
            "namespace": "Projection"
        },
        {
            "file": "addon/models/model.js",
            "line": 254,
            "description": "Rollback changes for `hasMany` relationships.",
            "itemtype": "method",
            "name": "rollbackHasMany",
            "params": [
                {
                    "name": "forOnlyKey",
                    "description": "If specified, it is rollback invoked for relationship with this key.",
                    "type": "String",
                    "optional": true
                }
            ],
            "class": "Projection.Model",
            "module": "ember-flexberry-data",
            "namespace": "Projection"
        },
        {
            "file": "addon/models/model.js",
            "line": 278,
            "description": "Сheck whether there is a changed `belongsTo` relationships.",
            "itemtype": "method",
            "name": "hasChangedBelongsTo",
            "return": {
                "description": "Returns `true` if `belongsTo` relationships have changed, else `false`.",
                "type": "Boolean"
            },
            "class": "Projection.Model",
            "module": "ember-flexberry-data",
            "namespace": "Projection"
        },
        {
            "file": "addon/models/model.js",
            "line": 302,
            "description": "Return object with changes.\n\nObject will have structure:\n* key - is name relationships that has changed\n  * array - include two items, old value, with index `0`, and new value, with index `1`.",
            "example": [
                "\n  ```javascript\n  {\n    key: [oldValue, newValue],\n  }\n  ```"
            ],
            "itemtype": "method",
            "name": "changedBelongsTo",
            "return": {
                "description": "Object with changes, empty object if no change.",
                "type": "Object"
            },
            "class": "Projection.Model",
            "module": "ember-flexberry-data",
            "namespace": "Projection"
        },
        {
            "file": "addon/models/model.js",
            "line": 333,
            "description": "Rollback changes for `belongsTo` relationships.",
            "itemtype": "method",
            "name": "rollbackBelongsTo",
            "params": [
                {
                    "name": "forOnlyKey",
                    "description": "If specified, it is rollback invoked for relationship with this key.",
                    "type": "String",
                    "optional": true
                }
            ],
            "class": "Projection.Model",
            "module": "ember-flexberry-data",
            "namespace": "Projection"
        },
        {
            "file": "addon/models/model.js",
            "line": 361,
            "description": "Rollback changes for all relationships.",
            "itemtype": "method",
            "name": "rollbackRelationships",
            "class": "Projection.Model",
            "module": "ember-flexberry-data",
            "namespace": "Projection"
        },
        {
            "file": "addon/models/model.js",
            "line": 371,
            "description": "Rollback all changes.",
            "itemtype": "method",
            "name": "rollbackAll",
            "class": "Projection.Model",
            "module": "ember-flexberry-data",
            "namespace": "Projection"
        },
        {
            "file": "addon/models/model.js",
            "line": 381,
            "description": "Initializes model.",
            "class": "Projection.Model",
            "module": "ember-flexberry-data",
            "namespace": "Projection"
        },
        {
            "file": "addon/models/model.js",
            "line": 399,
            "description": "Fired when the record is loaded from the server.\n[More info](http://emberjs.com/api/data/classes/DS.Model.html#event_didLoad).",
            "itemtype": "method",
            "name": "didLoad",
            "class": "Projection.Model",
            "module": "ember-flexberry-data",
            "namespace": "Projection"
        },
        {
            "file": "addon/models/model.js",
            "line": 410,
            "description": "Fired when the record is updated.\n[More info](http://emberjs.com/api/data/classes/DS.Model.html#event_didUpdate).",
            "itemtype": "method",
            "name": "didUpdate",
            "class": "Projection.Model",
            "module": "ember-flexberry-data",
            "namespace": "Projection"
        },
        {
            "file": "addon/models/model.js",
            "line": 421,
            "description": "Fired when the record is created.\n[More info](http://emberjs.com/api/data/classes/DS.Model.html#event_didCreate).",
            "itemtype": "method",
            "name": "didCreate",
            "class": "Projection.Model",
            "module": "ember-flexberry-data",
            "namespace": "Projection"
        },
        {
            "file": "addon/models/model.js",
            "line": 432,
            "description": "Destroys model.",
            "class": "Projection.Model",
            "module": "ember-flexberry-data",
            "namespace": "Projection"
        },
        {
            "file": "addon/models/model.js",
            "line": 450,
            "description": "Observes & handles changes in each hasMany relationship.",
            "itemtype": "method",
            "name": "_onChangeHasManyRelationship",
            "params": [
                {
                    "name": "changedObject",
                    "description": "Reference to changed object.",
                    "type": "Object"
                },
                {
                    "name": "changedPropertyPath",
                    "description": "Path to changed property.",
                    "type": "ChangedPropertyPath"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "Projection.Model",
            "module": "ember-flexberry-data",
            "namespace": "Projection"
        },
        {
            "file": "addon/models/model.js",
            "line": 462,
            "description": "Aggregates validation error messages for hasMany relationships.",
            "itemtype": "method",
            "name": "_aggregateHasManyRelationshipValidationErrors",
            "params": [
                {
                    "name": "changedObject",
                    "description": "Reference to changed object.",
                    "type": "Object"
                },
                {
                    "name": "changedPropertyPath",
                    "description": "Path to changed property.",
                    "type": "ChangedPropertyPath"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "Projection.Model",
            "module": "ember-flexberry-data",
            "namespace": "Projection"
        },
        {
            "file": "addon/models/model.js",
            "line": 504,
            "description": "Set each `belongsTo` relationship, observer, that save canonical state.",
            "itemtype": "method",
            "name": "_saveCanonicalBelongsTo",
            "access": "private",
            "tagname": "",
            "class": "Projection.Model",
            "module": "ember-flexberry-data",
            "namespace": "Projection"
        },
        {
            "file": "addon/models/model.js",
            "line": 530,
            "description": "Save canonical state for `belongsTo` relationships.",
            "itemtype": "method",
            "name": "_saveBelongsToObserver",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "sender",
                    "description": "",
                    "type": "DS.Model"
                },
                {
                    "name": "key",
                    "description": "",
                    "type": "String"
                }
            ],
            "class": "Projection.Model",
            "module": "ember-flexberry-data",
            "namespace": "Projection"
        },
        {
            "file": "addon/models/model.js",
            "line": 546,
            "description": "Defined projections for current model type.",
            "itemtype": "property",
            "name": "projections",
            "type": "Ember.Object",
            "default": "null",
            "access": "public",
            "tagname": "",
            "static": 1,
            "class": "Projection.Model",
            "module": "ember-flexberry-data",
            "namespace": "Projection"
        },
        {
            "file": "addon/models/model.js",
            "line": 557,
            "description": "Flag that indicates model id type.",
            "itemtype": "property",
            "name": "isType",
            "type": "string",
            "default": "'guid'",
            "class": "Projection.Model",
            "module": "ember-flexberry-data",
            "namespace": "Projection"
        },
        {
            "file": "addon/models/model.js",
            "line": 566,
            "description": "The namespace in which this model is defined.",
            "itemtype": "property",
            "name": "namespace",
            "type": "string",
            "default": "''",
            "static": 1,
            "class": "Projection.Model",
            "module": "ember-flexberry-data",
            "namespace": "Projection"
        },
        {
            "file": "addon/models/model.js",
            "line": 576,
            "description": "Defines idType for specified model type.",
            "itemtype": "method",
            "name": "defineIdType",
            "params": [
                {
                    "name": "newIdType",
                    "description": "Model id type.",
                    "type": "String"
                }
            ],
            "access": "public",
            "tagname": "",
            "static": 1,
            "class": "Projection.Model",
            "module": "ember-flexberry-data",
            "namespace": "Projection"
        },
        {
            "file": "addon/models/model.js",
            "line": 590,
            "description": "Defines projection for specified model type.",
            "itemtype": "method",
            "name": "defineProjection",
            "params": [
                {
                    "name": "projectionName",
                    "description": "Projection name, eg 'EmployeeE'.",
                    "type": "String"
                },
                {
                    "name": "modelName",
                    "description": "The name of the model type.",
                    "type": "String"
                },
                {
                    "name": "attributes",
                    "description": "Projection attributes.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "Created projection.",
                "type": "Object"
            },
            "access": "public",
            "tagname": "",
            "static": 1,
            "class": "Projection.Model",
            "module": "ember-flexberry-data",
            "namespace": "Projection"
        },
        {
            "file": "addon/models/model.js",
            "line": 619,
            "description": "Parent model type name.",
            "itemtype": "property",
            "name": "_parentModelName",
            "type": "String",
            "default": "null",
            "access": "private",
            "tagname": "",
            "static": 1,
            "class": "Projection.Model",
            "module": "ember-flexberry-data",
            "namespace": "Projection"
        },
        {
            "file": "addon/query/base-builder.js",
            "line": 9,
            "description": "Builds query.",
            "itemtype": "method",
            "name": "build",
            "return": {
                "description": "Query instance.",
                "type": "Object"
            },
            "access": "public",
            "tagname": "",
            "class": "Query.BaseBuilder",
            "module": "ember-flexberry-data",
            "namespace": "Query"
        },
        {
            "file": "addon/query/builder.js",
            "line": 50,
            "description": "Sets the id of the requested entity.",
            "itemtype": "method",
            "name": "byId",
            "params": [
                {
                    "name": "id",
                    "description": "The id of the requested entity.",
                    "type": "String|Number"
                }
            ],
            "return": {
                "description": "Returns this instance.",
                "type": "Query.Builder"
            },
            "access": "public",
            "tagname": "",
            "chainable": 1,
            "class": "Query.Builder",
            "module": "ember-flexberry-data",
            "namespace": "Query"
        },
        {
            "file": "addon/query/builder.js",
            "line": 64,
            "description": "Sets the name of the requested entity.",
            "itemtype": "method",
            "name": "from",
            "params": [
                {
                    "name": "modelName",
                    "description": "The name of the requested entity.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "Returns this instance.",
                "type": "Query.Builder"
            },
            "access": "public",
            "tagname": "",
            "chainable": 1,
            "class": "Query.Builder",
            "module": "ember-flexberry-data",
            "namespace": "Query"
        },
        {
            "file": "addon/query/builder.js",
            "line": 78,
            "description": "Restricts the selectable objects to the specified type.",
            "itemtype": "method",
            "name": "isOf",
            "params": [
                {
                    "name": "typeName",
                    "description": "The model name of which the selectable objects should be assigned.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "Returns this instance.",
                "type": "Query.Builder"
            },
            "access": "public",
            "tagname": "",
            "chainable": 1,
            "class": "Query.Builder",
            "module": "ember-flexberry-data",
            "namespace": "Query"
        },
        {
            "file": "addon/query/builder.js",
            "line": 99,
            "itemtype": "method",
            "name": "where",
            "params": [
                {
                    "name": "args",
                    "description": "",
                    "multiple": true
                }
            ],
            "return": {
                "description": "Returns this instance.",
                "type": "Query.Builder"
            },
            "access": "public",
            "tagname": "",
            "chainable": 1,
            "class": "Query.Builder",
            "module": "ember-flexberry-data",
            "namespace": "Query"
        },
        {
            "file": "addon/query/builder.js",
            "line": 112,
            "itemtype": "method",
            "name": "orderBy",
            "params": [
                {
                    "name": "property",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "Returns this instance.",
                "type": "Query.Builder"
            },
            "access": "public",
            "tagname": "",
            "chainable": 1,
            "class": "Query.Builder",
            "module": "ember-flexberry-data",
            "namespace": "Query"
        },
        {
            "file": "addon/query/builder.js",
            "line": 129,
            "itemtype": "method",
            "name": "top",
            "params": [
                {
                    "name": "top",
                    "description": "",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "Returns this instance.",
                "type": "Query.Builder"
            },
            "access": "public",
            "tagname": "",
            "chainable": 1,
            "class": "Query.Builder",
            "module": "ember-flexberry-data",
            "namespace": "Query"
        },
        {
            "file": "addon/query/builder.js",
            "line": 142,
            "itemtype": "method",
            "name": "skip",
            "params": [
                {
                    "name": "skip",
                    "description": "",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "Returns this instance.",
                "type": "Query.Builder"
            },
            "access": "public",
            "tagname": "",
            "chainable": 1,
            "class": "Query.Builder",
            "module": "ember-flexberry-data",
            "namespace": "Query"
        },
        {
            "file": "addon/query/builder.js",
            "line": 155,
            "itemtype": "method",
            "name": "count",
            "return": {
                "description": "Returns this instance.",
                "type": "Query.Builder"
            },
            "access": "public",
            "tagname": "",
            "chainable": 1,
            "class": "Query.Builder",
            "module": "ember-flexberry-data",
            "namespace": "Query"
        },
        {
            "file": "addon/query/builder.js",
            "line": 167,
            "description": "Adds attributes for selection.\nAutomatically checks duplications.",
            "itemtype": "method",
            "name": "select",
            "params": [
                {
                    "name": "attributes",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "Returns this instance.",
                "type": "Query.Builder"
            },
            "access": "public",
            "tagname": "",
            "chainable": 1,
            "class": "Query.Builder",
            "module": "ember-flexberry-data",
            "namespace": "Query"
        },
        {
            "file": "addon/query/builder.js",
            "line": 182,
            "description": "Adds attributes for selection from specified projection.\nMerges attributes with added using `select`.",
            "itemtype": "method",
            "name": "selectByProjection",
            "params": [
                {
                    "name": "projectionName",
                    "description": "The name of the projection.",
                    "type": "String"
                },
                {
                    "name": "idFromProjection",
                    "description": "",
                    "type": "Boolean"
                }
            ],
            "return": {
                "description": "Returns this instance.",
                "type": "Query.Builder"
            },
            "access": "public",
            "tagname": "",
            "chainable": 1,
            "class": "Query.Builder",
            "module": "ember-flexberry-data",
            "namespace": "Query"
        },
        {
            "file": "addon/query/builder.js",
            "line": 199,
            "itemtype": "method",
            "name": "ofDataType",
            "params": [
                {
                    "name": "dataType",
                    "description": "The name of the data type.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "Returns this instance.",
                "type": "Query.Builder"
            },
            "access": "public",
            "tagname": "",
            "chainable": 1,
            "class": "Query.Builder",
            "module": "ember-flexberry-data",
            "namespace": "Query"
        },
        {
            "file": "addon/query/builder.js",
            "line": 212,
            "itemtype": "method",
            "name": "withCustomParams",
            "params": [
                {
                    "name": "customQueryParams",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "Returns this instance.",
                "type": "Query.Builder"
            },
            "access": "public",
            "tagname": "",
            "chainable": 1,
            "class": "Query.Builder",
            "module": "ember-flexberry-data",
            "namespace": "Query"
        },
        {
            "file": "addon/query/builder.js",
            "line": 225,
            "description": "Builds query instance using all provided data.",
            "itemtype": "method",
            "name": "build",
            "return": {
                "description": "Query instance.",
                "type": "Object"
            },
            "access": "public",
            "tagname": "",
            "class": "Query.Builder",
            "module": "ember-flexberry-data",
            "namespace": "Query"
        },
        {
            "file": "addon/query/condition.js",
            "line": 10,
            "description": "OR logical condition.",
            "itemtype": "property",
            "name": "Or",
            "type": "Query.Condition",
            "static": 1,
            "final": 1,
            "class": "Query.Condition",
            "module": "ember-flexberry-data",
            "namespace": "Query"
        },
        {
            "file": "addon/query/condition.js",
            "line": 21,
            "description": "AND logical condition.",
            "itemtype": "property",
            "name": "And",
            "type": "Query.Condition",
            "static": 1,
            "final": 1,
            "class": "Query.Condition",
            "module": "ember-flexberry-data",
            "namespace": "Query"
        },
        {
            "file": "addon/query/condition.js",
            "line": 32,
            "description": "Tries to build condition from specified value.",
            "itemtype": "method",
            "name": "tryCreate",
            "params": [
                {
                    "name": "value",
                    "description": "Value with condition.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "Condition from the value.",
                "type": "Query.Condition"
            },
            "static": 1,
            "class": "Query.Condition",
            "module": "ember-flexberry-data",
            "namespace": "Query"
        },
        {
            "file": "addon/query/filter-operator.js",
            "line": 10,
            "description": "Operator for equality.",
            "itemtype": "property",
            "name": "Eq",
            "type": "Query.FilterOperator",
            "static": 1,
            "final": 1,
            "class": "Query.FilterOperator",
            "module": "ember-flexberry-data",
            "namespace": "Query"
        },
        {
            "file": "addon/query/filter-operator.js",
            "line": 21,
            "description": "Operator for inequality.",
            "itemtype": "property",
            "name": "Neq",
            "type": "Query.FilterOperator",
            "static": 1,
            "final": 1,
            "class": "Query.FilterOperator",
            "module": "ember-flexberry-data",
            "namespace": "Query"
        },
        {
            "file": "addon/query/filter-operator.js",
            "line": 32,
            "description": "Operator for _greater_.",
            "itemtype": "property",
            "name": "Ge",
            "type": "Query.FilterOperator",
            "static": 1,
            "final": 1,
            "class": "Query.FilterOperator",
            "module": "ember-flexberry-data",
            "namespace": "Query"
        },
        {
            "file": "addon/query/filter-operator.js",
            "line": 43,
            "description": "Operator for _greater or equal_.",
            "itemtype": "property",
            "name": "Ge",
            "type": "Query.FilterOperator",
            "static": 1,
            "final": 1,
            "class": "Query.FilterOperator",
            "module": "ember-flexberry-data",
            "namespace": "Query"
        },
        {
            "file": "addon/query/filter-operator.js",
            "line": 54,
            "description": "Operator for _less_.",
            "itemtype": "property",
            "name": "Le",
            "type": "Query.FilterOperator",
            "static": 1,
            "final": 1,
            "class": "Query.FilterOperator",
            "module": "ember-flexberry-data",
            "namespace": "Query"
        },
        {
            "file": "addon/query/filter-operator.js",
            "line": 65,
            "description": "Operator for _less or equal_.",
            "itemtype": "property",
            "name": "Le",
            "type": "Query.FilterOperator",
            "static": 1,
            "final": 1,
            "class": "Query.FilterOperator",
            "module": "ember-flexberry-data",
            "namespace": "Query"
        },
        {
            "file": "addon/query/filter-operator.js",
            "line": 76,
            "description": "Tries to build filter operator from specified value.",
            "itemtype": "method",
            "name": "tryCreate",
            "params": [
                {
                    "name": "value",
                    "description": "Value with filter operator.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "Filter operator from the value.",
                "type": "Query.FilterOperator"
            },
            "static": 1,
            "class": "Query.FilterOperator",
            "module": "ember-flexberry-data",
            "namespace": "Query"
        },
        {
            "file": "addon/query/indexeddb-adapter.js",
            "line": 40,
            "description": "Loads data from IndexedDB.",
            "itemtype": "method",
            "name": "query",
            "params": [
                {
                    "name": "store",
                    "description": "Store instance to the adapter.",
                    "type": "DS.Store or subclass"
                },
                {
                    "name": "query",
                    "description": "QueryObject instance to the adapter.",
                    "type": "QueryObject"
                }
            ],
            "return": {
                "description": "Promise with loaded data.",
                "type": "Promise"
            },
            "class": "Query.IndexedDBAdapter",
            "module": "ember-flexberry-data",
            "namespace": "Query"
        },
        {
            "file": "addon/query/indexeddb-adapter.js",
            "line": 589,
            "description": "Builds Dexie `WhereClause` for filtering data.\nFiltering only with Dexie can applied only for simple cases (for `SimplePredicate`).\nFor complex cases all logic implemened programmatically.",
            "params": [
                {
                    "name": "store",
                    "description": "Store instance.",
                    "type": "DS.Store or subclass"
                },
                {
                    "name": "table",
                    "description": "Table instance for loading objects.",
                    "type": "Dexie.Table"
                },
                {
                    "name": "query",
                    "description": "Query language instance for loading data.",
                    "type": "Query"
                }
            ],
            "return": {
                "description": "Table or collection that can be used with `toArray` method.",
                "type": "Dexie.Collection|Dexie.Table"
            },
            "class": "Query.IndexedDBAdapter",
            "module": "ember-flexberry-data",
            "namespace": "Query"
        },
        {
            "file": "addon/query/indexeddb-adapter.js",
            "line": 703,
            "description": "Checks query on contains restrictions by relationships.",
            "itemtype": "method",
            "name": "containsRelationships",
            "params": [
                {
                    "name": "query",
                    "description": "",
                    "type": "QueryObject"
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "Query.IndexedDBAdapter",
            "module": "ember-flexberry-data",
            "namespace": "Query"
        },
        {
            "file": "addon/query/js-adapter.js",
            "line": 47,
            "description": "Builds JS function for filtering JS array of objects by specified logic from query.",
            "itemtype": "method",
            "name": "buildFunc",
            "params": [
                {
                    "name": "query",
                    "description": "Query language instance."
                }
            ],
            "return": {
                "description": "Function for filtering JS array of objects.",
                "type": "Function"
            },
            "class": "Query.IndexedDBAdapter",
            "module": "ember-flexberry-data",
            "namespace": "Query"
        },
        {
            "file": "addon/query/js-adapter.js",
            "line": 64,
            "description": "Builds function for windowing array of objects using data from the query.",
            "params": [
                {
                    "name": "query",
                    "description": "Query instance.",
                    "type": "QueryObject"
                }
            ],
            "return": {
                "description": "",
                "type": "Function"
            },
            "class": "Query.IndexedDBAdapter",
            "module": "ember-flexberry-data",
            "namespace": "Query"
        },
        {
            "file": "addon/query/js-adapter.js",
            "line": 93,
            "description": "Builds function for ordering array of objects using data from the query.",
            "params": [
                {
                    "name": "query",
                    "description": "Query instance.",
                    "type": "QueryObject"
                }
            ],
            "return": {
                "description": "",
                "type": "Function"
            },
            "class": "Query.IndexedDBAdapter",
            "module": "ember-flexberry-data",
            "namespace": "Query"
        },
        {
            "file": "addon/query/js-adapter.js",
            "line": 145,
            "description": "Builds function for selecting subset of properties from array of objects using data from the query.",
            "params": [
                {
                    "name": "query",
                    "description": "Query instance.",
                    "type": "QueryObject"
                }
            ],
            "return": {
                "description": "",
                "type": "Function"
            },
            "class": "Query.IndexedDBAdapter",
            "module": "ember-flexberry-data",
            "namespace": "Query"
        },
        {
            "file": "addon/query/js-adapter.js",
            "line": 234,
            "description": "Builds function for filtering array of objects using predicate.",
            "params": [
                {
                    "name": "predicate",
                    "description": "Predicate for filtering array of objects.",
                    "type": "Query.BasePredicate"
                },
                {
                    "name": "options",
                    "description": "Object with options for transfer `getAttributeFilterFunction` function.",
                    "type": "Object",
                    "optional": true
                }
            ],
            "return": {
                "description": "",
                "type": "Function"
            },
            "class": "Query.IndexedDBAdapter",
            "module": "ember-flexberry-data",
            "namespace": "Query"
        },
        {
            "file": "addon/query/js-adapter.js",
            "line": 284,
            "description": "Returns function for checkign single object using predicate.",
            "params": [
                {
                    "name": "predicate",
                    "description": "Predicate for an attribute.",
                    "type": "Query.BasePredicate"
                },
                {
                    "name": "options",
                    "description": "Object with options.",
                    "type": "Object",
                    "optional": true,
                    "props": [
                        {
                            "name": "booleanAsString",
                            "description": "If this option set as `true` and type of `predicate.value` equals boolean, convert value to string.",
                            "type": "Object",
                            "optional": true
                        }
                    ]
                }
            ],
            "return": {
                "description": "Function for checkign single object.",
                "type": "Function"
            },
            "class": "Query.IndexedDBAdapter",
            "module": "ember-flexberry-data",
            "namespace": "Query"
        },
        {
            "file": "addon/query/js-adapter.js",
            "line": 425,
            "description": "Loads value from object by specified attribute path.",
            "params": [
                {
                    "name": "item",
                    "description": "Object for load value.",
                    "type": "Object"
                },
                {
                    "name": "attributePath",
                    "description": "The path to the attribute.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "Value of attribute or `undefined`.",
                "type": "*|undefined"
            },
            "class": "Query.IndexedDBAdapter",
            "module": "ember-flexberry-data",
            "namespace": "Query"
        },
        {
            "file": "addon/query/js-adapter.js",
            "line": 451,
            "description": "Returns complex filter function for `and` condition.\nResult function filters array of objects and returns those, for which\nall attribute filter functions returned `true`.\nResult function uses short circuit logic ([wiki](https://en.wikipedia.org/wiki/Short-circuit_evaluation)).",
            "params": [
                {
                    "name": "filterFunctions",
                    "description": "Array of attribute filter functions.",
                    "type": "Function[]"
                }
            ],
            "return": {
                "description": "Complex filter function for `or` condition.",
                "type": "Function"
            },
            "class": "Query.IndexedDBAdapter",
            "module": "ember-flexberry-data",
            "namespace": "Query"
        },
        {
            "file": "addon/query/js-adapter.js",
            "line": 481,
            "description": "Returns complex filter function for `or` condition.\nResult function filters array of objects and returns those, for which\nat least one attribute filter function returned `true`.\nResult function uses short circuit logic ([wiki](https://en.wikipedia.org/wiki/Short-circuit_evaluation)).",
            "params": [
                {
                    "name": "filterFunctions",
                    "description": "Array of attribute filter functions.",
                    "type": "Function[]"
                }
            ],
            "return": {
                "description": "Complex filter function for `or` condition.",
                "type": "Function"
            },
            "class": "Query.IndexedDBAdapter",
            "module": "ember-flexberry-data",
            "namespace": "Query"
        },
        {
            "file": "addon/query/odata-adapter.js",
            "line": 52,
            "description": "Returns query data for querying OData feed (for query part).",
            "itemtype": "method",
            "name": "getODataQuery",
            "params": [
                {
                    "name": "query",
                    "description": "The query for building OData URL.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "",
                "type": "Object"
            },
            "access": "public",
            "tagname": "",
            "class": "Query.ODataAdapter",
            "module": "ember-flexberry-data",
            "namespace": "Query"
        },
        {
            "file": "addon/query/odata-adapter.js",
            "line": 92,
            "description": "Returns select and expand query data for OData function.",
            "itemtype": "method",
            "name": "getODataFunctionQuery",
            "params": [
                {
                    "name": "queryParams",
                    "description": "The query parameters for building OData URL.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "",
                "type": "String"
            },
            "class": "Query.ODataAdapter",
            "module": "ember-flexberry-data",
            "namespace": "Query"
        },
        {
            "file": "addon/query/odata-adapter.js",
            "line": 118,
            "description": "Returns full URL for querying OData feed (base part and query part).",
            "itemtype": "method",
            "name": "getODataFullUrl",
            "params": [
                {
                    "name": "query",
                    "description": "The query for building OData URL.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "Full URL.",
                "type": "String"
            },
            "class": "Query.ODataAdapter",
            "module": "ember-flexberry-data",
            "namespace": "Query"
        },
        {
            "file": "addon/query/odata-adapter.js",
            "line": 233,
            "description": "Converts specified predicate into OData filter part.",
            "params": [
                {
                    "name": "predicate",
                    "description": "Predicate to convert.",
                    "type": "BasePredicate"
                },
                {
                    "name": "prefix",
                    "description": "Prefix for detail attributes.",
                    "type": "String"
                },
                {
                    "name": "level",
                    "description": "Nesting level for recursion with comples predicates.",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "OData filter part.",
                "type": "String"
            },
            "class": "Query.ODataAdapter",
            "module": "ember-flexberry-data",
            "namespace": "Query"
        },
        {
            "file": "addon/query/odata-adapter.js",
            "line": 317,
            "description": "Converts filter operator to OData representation.",
            "params": [
                {
                    "name": "operator",
                    "description": "Operator to convert.",
                    "type": "Query.FilterOperator"
                }
            ],
            "return": {
                "description": "Converted operator.",
                "type": "String"
            },
            "class": "Query.ODataAdapter",
            "module": "ember-flexberry-data",
            "namespace": "Query"
        },
        {
            "file": "addon/query/order-by-clause.js",
            "line": 31,
            "description": "Count elements for sorting.",
            "itemtype": "attribute",
            "name": "length",
            "type": "{Number}",
            "access": "public",
            "tagname": "",
            "class": "Query.OrderByClause",
            "module": "ember-flexberry-data",
            "namespace": "Query"
        },
        {
            "file": "addon/query/order-by-clause.js",
            "line": 42,
            "description": "Returns object with parameters for sorting.",
            "itemtype": "method",
            "name": "attribute",
            "params": [
                {
                    "name": "index",
                    "description": "Index element in array.",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "Object with parameters for sorting.",
                "type": "Object"
            },
            "class": "Query.OrderByClause",
            "module": "ember-flexberry-data",
            "namespace": "Query"
        },
        {
            "file": "addon/query/predicate.js",
            "line": 38,
            "description": "The path to the attribute for filtering.",
            "itemtype": "property",
            "name": "attributePath",
            "type": "String",
            "access": "public",
            "tagname": "",
            "class": "Query.SimplePredicate",
            "module": "ember-flexberry-data",
            "namespace": "Query"
        },
        {
            "file": "addon/query/predicate.js",
            "line": 49,
            "description": "The filter operator.",
            "itemtype": "property",
            "name": "operator",
            "type": "Query.FilterOperator",
            "access": "public",
            "tagname": "",
            "class": "Query.SimplePredicate",
            "module": "ember-flexberry-data",
            "namespace": "Query"
        },
        {
            "file": "addon/query/predicate.js",
            "line": 60,
            "description": "The value for filtering.",
            "itemtype": "property",
            "name": "value",
            "type": "String|Number",
            "access": "public",
            "tagname": "",
            "class": "Query.SimplePredicate",
            "module": "ember-flexberry-data",
            "namespace": "Query"
        },
        {
            "file": "addon/query/predicate.js",
            "line": 71,
            "description": "Converts this instance to string.",
            "itemtype": "method",
            "name": "toString",
            "return": {
                "description": "Text representation of the predicate.",
                "type": "String"
            },
            "access": "public",
            "tagname": "",
            "class": "Query.SimplePredicate",
            "module": "ember-flexberry-data",
            "namespace": "Query"
        },
        {
            "file": "addon/query/predicate.js",
            "line": 111,
            "description": "The path to the attribute for filtering.",
            "itemtype": "property",
            "name": "attributePath",
            "type": "String",
            "access": "public",
            "tagname": "",
            "class": "Query.DatePredicate",
            "module": "ember-flexberry-data",
            "namespace": "Query"
        },
        {
            "file": "addon/query/predicate.js",
            "line": 122,
            "description": "The filter operator.",
            "itemtype": "property",
            "name": "operator",
            "type": "Query.FilterOperator",
            "access": "public",
            "tagname": "",
            "class": "Query.DatePredicate",
            "module": "ember-flexberry-data",
            "namespace": "Query"
        },
        {
            "file": "addon/query/predicate.js",
            "line": 133,
            "description": "The value for filtering.",
            "itemtype": "property",
            "name": "value",
            "type": "String",
            "access": "public",
            "tagname": "",
            "class": "Query.DatePredicate",
            "module": "ember-flexberry-data",
            "namespace": "Query"
        },
        {
            "file": "addon/query/predicate.js",
            "line": 144,
            "description": "Flag for dates.",
            "itemtype": "property",
            "name": "timeless",
            "type": "Boolean",
            "access": "public",
            "tagname": "",
            "class": "Query.DatePredicate",
            "module": "ember-flexberry-data",
            "namespace": "Query"
        },
        {
            "file": "addon/query/predicate.js",
            "line": 155,
            "description": "Converts this instance to string.",
            "itemtype": "method",
            "name": "toString",
            "return": {
                "description": "Text representation of the predicate.",
                "type": "String"
            },
            "access": "public",
            "tagname": "",
            "class": "Query.DatePredicate",
            "module": "ember-flexberry-data",
            "namespace": "Query"
        },
        {
            "file": "addon/query/predicate.js",
            "line": 225,
            "description": "Converts this instance to string.",
            "itemtype": "method",
            "name": "toString",
            "return": {
                "description": "Text representation of the predicate.",
                "type": "String"
            },
            "access": "public",
            "tagname": "",
            "class": "Query.ComplexPredicate",
            "module": "ember-flexberry-data",
            "namespace": "Query"
        },
        {
            "file": "addon/query/predicate.js",
            "line": 259,
            "description": "The path to the attribute for predicate.",
            "itemtype": "property",
            "name": "attributePath",
            "type": "{String}",
            "access": "public",
            "tagname": "",
            "class": "Query.StringPredicate",
            "module": "ember-flexberry-data",
            "namespace": "Query"
        },
        {
            "file": "addon/query/predicate.js",
            "line": 270,
            "description": "The value that has to be contained in the attribute.",
            "itemtype": "property",
            "name": "containsValue",
            "type": "{String}",
            "access": "public",
            "tagname": "",
            "class": "Query.StringPredicate",
            "module": "ember-flexberry-data",
            "namespace": "Query"
        },
        {
            "file": "addon/query/predicate.js",
            "line": 281,
            "description": "Sets the value that the attribute has to contain.",
            "itemtype": "method",
            "name": "contains",
            "params": [
                {
                    "name": "value",
                    "description": "The value that the attribute has to contain.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "Returns this instance.",
                "type": "Query.StringPredicate"
            },
            "chainable": 1,
            "class": "Query.StringPredicate",
            "module": "ember-flexberry-data",
            "namespace": "Query"
        },
        {
            "file": "addon/query/predicate.js",
            "line": 317,
            "description": "The path to the attribute for predicate.",
            "itemtype": "property",
            "name": "attributePath",
            "type": "{String}",
            "access": "public",
            "tagname": "",
            "class": "Query.GeographyPredicate",
            "module": "ember-flexberry-data",
            "namespace": "Query"
        },
        {
            "file": "addon/query/predicate.js",
            "line": 328,
            "description": "The geography value that has to intersect with the attribute.",
            "itemtype": "property",
            "name": "intersectsValue",
            "type": "{String}",
            "access": "public",
            "tagname": "",
            "class": "Query.GeographyPredicate",
            "module": "ember-flexberry-data",
            "namespace": "Query"
        },
        {
            "file": "addon/query/predicate.js",
            "line": 339,
            "description": "Sets the value that the attribute has to contain.",
            "itemtype": "method",
            "name": "contains",
            "params": [
                {
                    "name": "geography",
                    "description": "The geography value that has to intersect with the attribute.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "Returns this instance.",
                "type": "Query.StringPredicate"
            },
            "chainable": 1,
            "class": "Query.GeographyPredicate",
            "module": "ember-flexberry-data",
            "namespace": "Query"
        },
        {
            "file": "addon/query/predicate.js",
            "line": 375,
            "description": "The path to the attribute for predicate.",
            "itemtype": "property",
            "name": "attributePath",
            "type": "{String}",
            "access": "public",
            "tagname": "",
            "class": "Query.GeometryPredicate",
            "module": "ember-flexberry-data",
            "namespace": "Query"
        },
        {
            "file": "addon/query/predicate.js",
            "line": 386,
            "description": "The geometry value that has to intersect with the attribute.",
            "itemtype": "property",
            "name": "intersectsValue",
            "type": "{String}",
            "access": "public",
            "tagname": "",
            "class": "Query.GeometryPredicate",
            "module": "ember-flexberry-data",
            "namespace": "Query"
        },
        {
            "file": "addon/query/predicate.js",
            "line": 397,
            "description": "Sets the value that the attribute has to contain.",
            "itemtype": "method",
            "name": "contains",
            "params": [
                {
                    "name": "geometry",
                    "description": "The geometry value that has to intersect with the attribute.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "Returns this instance.",
                "type": "Query.StringPredicate"
            },
            "chainable": 1,
            "class": "Query.GeometryPredicate",
            "module": "ember-flexberry-data",
            "namespace": "Query"
        },
        {
            "file": "addon/query/predicate.js",
            "line": 435,
            "description": "The path to the detail for predicate.",
            "return": {
                "description": "",
                "type": "String"
            },
            "class": "Query.DetailPredicate",
            "module": "ember-flexberry-data",
            "namespace": "Query"
        },
        {
            "file": "addon/query/predicate.js",
            "line": 444,
            "description": "The predicate for details.",
            "return": {
                "description": "",
                "type": "Query.BasePredicate|null"
            },
            "class": "Query.DetailPredicate",
            "module": "ember-flexberry-data",
            "namespace": "Query"
        },
        {
            "file": "addon/query/predicate.js",
            "line": 453,
            "description": "Is need to use predicate for all details.",
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "Query.DetailPredicate",
            "module": "ember-flexberry-data",
            "namespace": "Query"
        },
        {
            "file": "addon/query/predicate.js",
            "line": 462,
            "description": "Is need to use predicate for any detail.",
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "Query.DetailPredicate",
            "module": "ember-flexberry-data",
            "namespace": "Query"
        },
        {
            "file": "addon/query/predicate.js",
            "line": 471,
            "description": "Adds predicate for all details.",
            "itemtype": "method",
            "name": "all",
            "params": [
                {
                    "name": "args",
                    "description": "Predicate for all details.",
                    "multiple": true
                }
            ],
            "return": {
                "description": "Returns this instance.",
                "type": "Query.DetailPredicate"
            },
            "access": "public",
            "tagname": "",
            "class": "Query.DetailPredicate",
            "module": "ember-flexberry-data",
            "namespace": "Query"
        },
        {
            "file": "addon/query/predicate.js",
            "line": 487,
            "description": "Adds predicate for any detail.",
            "itemtype": "method",
            "name": "any",
            "params": [
                {
                    "name": "args",
                    "description": "Predicate for any detail.",
                    "multiple": true
                }
            ],
            "return": {
                "description": "Returns this instance.",
                "type": "Query.DetailPredicate"
            },
            "access": "public",
            "tagname": "",
            "class": "Query.DetailPredicate",
            "module": "ember-flexberry-data",
            "namespace": "Query"
        },
        {
            "file": "addon/query/predicate.js",
            "line": 503,
            "description": "Converts this instance to string.",
            "itemtype": "method",
            "name": "toString",
            "return": {
                "description": "Text representation of the predicate.",
                "type": "String"
            },
            "access": "public",
            "tagname": "",
            "class": "Query.DetailPredicate",
            "module": "ember-flexberry-data",
            "namespace": "Query"
        },
        {
            "file": "addon/query/predicate.js",
            "line": 543,
            "description": "Predicate getter.",
            "itemtype": "property",
            "name": "predicate",
            "type": "String",
            "access": "public",
            "tagname": "",
            "class": "Query.NotPredicate",
            "module": "ember-flexberry-data",
            "namespace": "Query"
        },
        {
            "file": "addon/query/predicate.js",
            "line": 554,
            "description": "Converts this instance to string.",
            "itemtype": "method",
            "name": "toString",
            "return": {
                "description": "Text representation of result predicate.",
                "type": "String"
            },
            "access": "public",
            "tagname": "",
            "class": "Query.NotPredicate",
            "module": "ember-flexberry-data",
            "namespace": "Query"
        },
        {
            "file": "addon/query/predicate.js",
            "line": 603,
            "description": "Expression getter.",
            "itemtype": "property",
            "name": "expression",
            "type": "String",
            "access": "public",
            "tagname": "",
            "class": "Query.IsOfPredicate",
            "module": "ember-flexberry-data",
            "namespace": "Query"
        },
        {
            "file": "addon/query/predicate.js",
            "line": 614,
            "description": "Type name getter.",
            "itemtype": "property",
            "name": "typeName",
            "type": "String",
            "access": "public",
            "tagname": "",
            "class": "Query.IsOfPredicate",
            "module": "ember-flexberry-data",
            "namespace": "Query"
        },
        {
            "file": "addon/query/predicate.js",
            "line": 625,
            "description": "Converts this instance to string.",
            "itemtype": "method",
            "name": "toString",
            "return": {
                "description": "Text representation of result predicate.",
                "type": "String"
            },
            "access": "public",
            "tagname": "",
            "class": "Query.IsOfPredicate",
            "module": "ember-flexberry-data",
            "namespace": "Query"
        },
        {
            "file": "addon/query/predicate.js",
            "line": 637,
            "description": "Combines specified predicates using `and` logic condition.",
            "itemtype": "method",
            "name": "and",
            "params": [
                {
                    "name": "predicates",
                    "description": "List of predicates for combining.",
                    "type": "Query.BasePredicate",
                    "multiple": true
                }
            ],
            "return": {
                "description": "Combined complex predicate with `and` logic.",
                "type": "Query.ComplexPredicate"
            },
            "access": "public",
            "tagname": "",
            "class": "Query.BasePredicate",
            "module": "ember-flexberry-data"
        },
        {
            "file": "addon/query/predicate.js",
            "line": 651,
            "description": "Combines specified predicates using `or` logic condition.",
            "itemtype": "method",
            "name": "or",
            "params": [
                {
                    "name": "predicates",
                    "description": "List of predicates for combining.",
                    "type": "Query.BasePredicate",
                    "multiple": true
                }
            ],
            "return": {
                "description": "Combined complex predicate with `or` logic.",
                "type": "Query.ComplexPredicate"
            },
            "access": "public",
            "tagname": "",
            "class": "Query.BasePredicate",
            "module": "ember-flexberry-data",
            "namespace": "Query"
        },
        {
            "file": "addon/query/predicate.js",
            "line": 665,
            "description": "Throws error if specified argument is not a predicate.",
            "params": [
                {
                    "name": "predicate",
                    "description": "Object for validate.",
                    "type": "Object"
                }
            ],
            "class": "Query.BasePredicate",
            "module": "ember-flexberry-data",
            "namespace": "Query"
        },
        {
            "file": "addon/query/predicate.js",
            "line": 676,
            "description": "Creates predicate by various parameters.",
            "itemtype": "method",
            "name": "createPredicate",
            "params": [
                {
                    "name": "args",
                    "description": "Arguments for the predicate."
                }
            ],
            "return": {
                "description": "",
                "type": "BasePredicate"
            },
            "class": "Query.BasePredicate",
            "module": "ember-flexberry-data",
            "namespace": "Query"
        },
        {
            "file": "addon/query/predicate.js",
            "line": 700,
            "description": "Convert string to predicate.",
            "itemtype": "method",
            "name": "stringToPredicate",
            "params": [
                {
                    "name": "stringPredicate",
                    "description": ""
                }
            ],
            "return": {
                "description": "",
                "type": "BasePredicate"
            },
            "class": "Query.BasePredicate",
            "module": "ember-flexberry-data",
            "namespace": "Query"
        },
        {
            "file": "addon/serializers/base.js",
            "line": 14,
            "description": "Flag: indicates whether to use new {@link http://jsonapi.org|JSON API} serialization.",
            "class": "Serializer.Base",
            "module": "ember-flexberry-data",
            "namespace": "Serializer"
        },
        {
            "file": "addon/serializers/base.js",
            "line": 19,
            "description": "Prefix for response metadata properties names.",
            "class": "Serializer.Base",
            "module": "ember-flexberry-data",
            "namespace": "Serializer"
        },
        {
            "file": "addon/serializers/base.js",
            "line": 24,
            "description": "Normalization method for single objects.",
            "params": [
                {
                    "name": "store",
                    "description": "Storage."
                },
                {
                    "name": "typeClass",
                    "description": "Type of received object."
                },
                {
                    "name": "payload",
                    "description": "Received object itself."
                },
                {
                    "name": "id",
                    "description": "Identifier of received object."
                }
            ],
            "return": {
                "description": "Valid {@link http://jsonapi.org/format/#document-top-level|JSON API document}.",
                "type": "Object"
            },
            "class": "Serializer.Base",
            "module": "ember-flexberry-data",
            "namespace": "Serializer"
        },
        {
            "file": "addon/serializers/base.js",
            "line": 44,
            "description": "Normalization method for arrays of objects.",
            "params": [
                {
                    "name": "store",
                    "description": "Storage."
                },
                {
                    "name": "typeClass",
                    "description": "Type of received object."
                },
                {
                    "name": "payload",
                    "description": "Received objects array."
                }
            ],
            "return": {
                "description": "Valid {http://jsonapi.org/format/#document-top-level|@link JSON API document}.",
                "type": "Object"
            },
            "class": "Serializer.Base",
            "module": "ember-flexberry-data",
            "namespace": "Serializer"
        },
        {
            "file": "addon/serializers/base.js",
            "line": 60,
            "description": "Normalization method for objects.",
            "params": [
                {
                    "name": "typeClass",
                    "description": "Type of received object."
                },
                {
                    "name": "hash",
                    "description": "Target hash."
                }
            ],
            "return": {
                "description": "Valid {http://jsonapi.org/format/#document-top-level|@link JSON API document}.",
                "type": "Object"
            },
            "class": "Serializer.Base",
            "module": "ember-flexberry-data",
            "namespace": "Serializer"
        },
        {
            "file": "addon/serializers/base.js",
            "line": 81,
            "description": "Extracts metadata from received object.",
            "params": [
                {
                    "name": "store",
                    "description": "Storage."
                },
                {
                    "name": "type",
                    "description": "Type of received object."
                },
                {
                    "name": "payload",
                    "description": "Received object itself."
                }
            ],
            "return": {
                "description": "Metadata extracted from received object (any format is allowed).",
                "type": "Object"
            },
            "class": "Serializer.Base",
            "module": "ember-flexberry-data",
            "namespace": "Serializer"
        },
        {
            "file": "addon/serializers/base.js",
            "line": 100,
            "description": "Returns key for a given attribute.",
            "params": [
                {
                    "name": "attr",
                    "description": "Attribute."
                }
            ],
            "return": {
                "description": "Key for a given attribute.",
                "type": "String"
            },
            "class": "Serializer.Base",
            "module": "ember-flexberry-data",
            "namespace": "Serializer"
        },
        {
            "file": "addon/serializers/base.js",
            "line": 110,
            "description": "Returns key for a given relationship.",
            "params": [
                {
                    "name": "key",
                    "description": "Existing relationship key."
                },
                {
                    "name": "relationship",
                    "description": "Relationship."
                }
            ],
            "return": {
                "description": "Key for a given relationship.",
                "type": "String"
            },
            "class": "Serializer.Base",
            "module": "ember-flexberry-data",
            "namespace": "Serializer"
        },
        {
            "file": "addon/serializers/base.js",
            "line": 123,
            "description": "Return model name for relationship.",
            "itemtype": "method",
            "name": "modelNameFromRelationshipType",
            "params": [
                {
                    "name": "relationshipType",
                    "description": "Type of relationship (`relationship.type`).",
                    "type": "String"
                }
            ],
            "class": "Serializer.Base",
            "module": "ember-flexberry-data",
            "namespace": "Serializer"
        },
        {
            "file": "addon/serializers/base.js",
            "line": 133,
            "description": "Serialization method to serialize record into hash.",
            "params": [
                {
                    "name": "hash",
                    "description": "Target hash."
                },
                {
                    "name": "type",
                    "description": "Record type."
                },
                {
                    "name": "record",
                    "description": "Record itself."
                },
                {
                    "name": "options",
                    "description": "Serialization options."
                }
            ],
            "class": "Serializer.Base",
            "module": "ember-flexberry-data",
            "namespace": "Serializer"
        },
        {
            "file": "addon/serializers/base.js",
            "line": 150,
            "description": "You can use this method to customize how polymorphic objects are serialized.\n[More info](http://emberjs.com/api/data/classes/DS.RESTSerializer.html#method_serializePolymorphicType).",
            "itemtype": "method",
            "name": "serializePolymorphicType",
            "params": [
                {
                    "name": "snapshot",
                    "description": "",
                    "type": "DS.Snapshot"
                },
                {
                    "name": "json",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "relationship",
                    "description": "",
                    "type": "Object"
                }
            ],
            "class": "Serializer.Base",
            "module": "ember-flexberry-data",
            "namespace": "Serializer"
        },
        {
            "file": "addon/serializers/base.js",
            "line": 167,
            "description": "You can use this method to customize how a polymorphic relationship should be extracted.\n[More info](http://emberjs.com/api/data/classes/DS.RESTSerializer.html#method_extractPolymorphicRelationship).",
            "itemtype": "method",
            "name": "extractPolymorphicRelationship",
            "params": [
                {
                    "name": "relationshipType",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "relationshipHash",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "",
                "type": "Object"
            },
            "class": "Serializer.Base",
            "module": "ember-flexberry-data",
            "namespace": "Serializer"
        },
        {
            "file": "addon/serializers/base.js",
            "line": 187,
            "description": "This method is used to convert each JSON root key in the payload into a modelName that it can use to look up the appropriate model for that part of the payload.\n[More info](http://emberjs.com/api/data/classes/DS.RESTSerializer.html#method_modelNameFromPayloadKey).",
            "itemtype": "method",
            "name": "modelNameFromPayloadKey",
            "params": [
                {
                    "name": "key",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "String"
            },
            "class": "Serializer.Base",
            "module": "ember-flexberry-data",
            "namespace": "Serializer"
        },
        {
            "file": "addon/serializers/base.js",
            "line": 199,
            "description": "Moves metadata from one object to another.",
            "params": [
                {
                    "name": "dest",
                    "description": "Destination object."
                },
                {
                    "name": "src",
                    "description": "Source object."
                },
                {
                    "name": "withPrefix",
                    "description": "Flag: indicates whether to include metadata prefixes into properties names or not."
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "Serializer.Base",
            "module": "ember-flexberry-data",
            "namespace": "Serializer"
        },
        {
            "file": "addon/serializers/odata.js",
            "line": 15,
            "description": "`serializeBelongsTo` can be used to customize how `DS.belongsTo` properties are serialized.\nIf there is set option `odata-id` at serializer and `DS.belongsTo` property is not null,\nthen property will be serialized like:\n```\nRelationName@odata.bind': RelationType(RelatedObjectId)\n```",
            "itemtype": "method",
            "name": "serializeBelongsTo",
            "params": [
                {
                    "name": "snapshot",
                    "description": "",
                    "type": "DS.Snapshot"
                },
                {
                    "name": "json",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "relationship",
                    "description": "",
                    "type": "Object"
                }
            ],
            "class": "Serializer.OData",
            "module": "ember-flexberry-data",
            "namespace": "Serializer"
        },
        {
            "file": "addon/serializers/odata.js",
            "line": 53,
            "description": "Returns key for a given relationship.",
            "params": [
                {
                    "name": "key",
                    "description": "Existing relationship key."
                }
            ],
            "return": {
                "description": "Key for a given relationship.",
                "type": "String"
            },
            "class": "Serializer.OData",
            "module": "ember-flexberry-data",
            "namespace": "Serializer"
        },
        {
            "file": "addon/serializers/odata.js",
            "line": 68,
            "description": "Fixes error with hasMany polymorphic relationships.\nDelete this after ember-data 3.5.0 update.",
            "itemtype": "method",
            "name": "_normalizeEmbeddedRelationship",
            "access": "private",
            "tagname": "",
            "class": "Serializer.OData",
            "module": "ember-flexberry-data",
            "namespace": "Serializer"
        },
        {
            "file": "addon/serializers/offline.js",
            "line": 27,
            "description": "If the adapter returns the `belongsTo` relation as an identifier, we will replace it with an object with the `id` property.\n\nSee [EmberJS API](https://emberjs.com/api/).",
            "params": [
                {
                    "name": "typeClass",
                    "description": "",
                    "type": "DS.Model"
                },
                {
                    "name": "hash",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "",
                "type": "Object"
            },
            "class": "Serializer.Offline",
            "module": "ember-flexberry-data",
            "namespace": "Serializer"
        },
        {
            "file": "addon/serializers/offline.js",
            "line": 46,
            "description": "Returns the resource's attributes formatted as a JSON-API \"attributes object\".\n[More info](http://emberjs.com/api/data/classes/DS.JSONSerializer.html#method_extractAttributes).",
            "itemtype": "method",
            "name": "extractAttributes",
            "params": [
                {
                    "name": "model",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "hash",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "",
                "type": "Object"
            },
            "class": "Serializer.Offline",
            "module": "ember-flexberry-data",
            "namespace": "Serializer"
        },
        {
            "file": "addon/serializers/offline.js",
            "line": 69,
            "description": "Method `serializeAttribute` can be used to customize how DS.attr properties are serialized.\n[More info](http://emberjs.com/api/data/classes/DS.JSONSerializer.html#method_serializeAttribute).",
            "itemtype": "method",
            "name": "serializeAttribute",
            "params": [
                {
                    "name": "snapshot",
                    "description": "",
                    "type": "DS.Snapshot"
                },
                {
                    "name": "json",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "key",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "attribute",
                    "description": "",
                    "type": "Object"
                }
            ],
            "class": "Serializer.Offline",
            "module": "ember-flexberry-data",
            "namespace": "Serializer"
        },
        {
            "file": "addon/serializers/offline.js",
            "line": 143,
            "description": "Normalization method for arrays of objects.\n[More info](http://emberjs.com/api/data/classes/DS.JSONSerializer.html#method_normalizeArrayResponse).",
            "itemtype": "method",
            "name": "normalizeArrayResponse",
            "params": [
                {
                    "name": "store",
                    "description": "",
                    "type": "DS.Store"
                },
                {
                    "name": "type",
                    "description": "",
                    "type": "DS.Model"
                },
                {
                    "name": "payload",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "",
                "type": "Object"
            },
            "class": "Serializer.Offline",
            "module": "ember-flexberry-data",
            "namespace": "Serializer"
        },
        {
            "file": "addon/services/dexie.js",
            "line": 23,
            "description": "Contains instances of Dexie.",
            "itemtype": "property",
            "name": "_dexie",
            "type": "Object",
            "class": "Offline.DexieService",
            "module": "ember-flexberry-data",
            "namespace": "Offline"
        },
        {
            "file": "addon/services/dexie.js",
            "line": 31,
            "description": "Count of objects that should be synced down.",
            "itemtype": "property",
            "name": "queueSyncDownWorksCount",
            "type": "Number",
            "default": "0",
            "class": "Offline.DexieService",
            "module": "ember-flexberry-data",
            "namespace": "Offline"
        },
        {
            "file": "addon/services/dexie.js",
            "line": 40,
            "description": "Count of objects that should be synced up.",
            "itemtype": "property",
            "name": "queueSyncUpWorksCount",
            "type": "Number",
            "default": "0",
            "class": "Offline.DexieService",
            "module": "ember-flexberry-data",
            "namespace": "Offline"
        },
        {
            "file": "addon/services/dexie.js",
            "line": 49,
            "description": "Total count of objects that should be synced up on current sync up operation.",
            "itemtype": "property",
            "name": "queueSyncUpTotalWorksCount",
            "type": "Number",
            "default": "0",
            "class": "Offline.DexieService",
            "module": "ember-flexberry-data",
            "namespace": "Offline"
        },
        {
            "file": "addon/services/dexie.js",
            "line": 58,
            "description": "Total count of objects that should be synced up on current sync up operation.",
            "itemtype": "property",
            "name": "queueSyncUpTotalWorksCount",
            "type": "String",
            "default": "null",
            "class": "Offline.DexieService",
            "module": "ember-flexberry-data",
            "namespace": "Offline"
        },
        {
            "file": "addon/services/dexie.js",
            "line": 67,
            "description": "Allows to enable or disable continuation of performing CRUD operations in queue if error occurs.",
            "itemtype": "property",
            "name": "queueContinueOnError",
            "type": "Boolean",
            "default": "true",
            "class": "Offline.DexieService",
            "module": "ember-flexberry-data",
            "namespace": "Offline"
        },
        {
            "file": "addon/services/dexie.js",
            "line": 80,
            "description": "Return the only instance of Dexie database with specified schemas.\nSchemas are specified in base store in `offlineSchema` property.",
            "itemtype": "method",
            "name": "dexie",
            "params": [
                {
                    "name": "dbName",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "store",
                    "description": "",
                    "type": "DS.Store or subclass"
                },
                {
                    "name": "options",
                    "description": "",
                    "type": "Object",
                    "optional": true,
                    "props": [
                        {
                            "name": "addons",
                            "description": "",
                            "type": "Array",
                            "optional": true
                        },
                        {
                            "name": "autoOpen",
                            "description": "",
                            "type": "Boolean",
                            "optional": true
                        },
                        {
                            "name": "indexedDB",
                            "description": "",
                            "type": "IDBFactory",
                            "optional": true
                        },
                        {
                            "name": "IDBKeyRange",
                            "description": "",
                            "type": "IDBKeyRange",
                            "optional": true
                        }
                    ]
                }
            ],
            "return": {
                "description": "Dexie database.",
                "type": "Dexie"
            },
            "class": "Offline.DexieService",
            "module": "ember-flexberry-data",
            "namespace": "Offline"
        },
        {
            "file": "addon/services/dexie.js",
            "line": 110,
            "description": "Add operation to queue of Dexie oprations.",
            "itemtype": "method",
            "name": "performQueueOperation",
            "params": [
                {
                    "name": "db",
                    "description": "",
                    "type": "Dexie"
                },
                {
                    "name": "operation",
                    "description": "",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "Promise for added to queue operation.",
                "type": "Promise"
            },
            "class": "Offline.DexieService",
            "module": "ember-flexberry-data",
            "namespace": "Offline"
        },
        {
            "file": "addon/services/dexie.js",
            "line": 134,
            "description": "Perform Dexie opration without adding it to queue.",
            "itemtype": "method",
            "name": "performOperation",
            "params": [
                {
                    "name": "db",
                    "description": "",
                    "type": "Dexie"
                },
                {
                    "name": "operation",
                    "description": "",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "Result of performed operation.",
                "type": "Promise"
            },
            "class": "Offline.DexieService",
            "module": "ember-flexberry-data",
            "namespace": "Offline"
        },
        {
            "file": "addon/services/dexie.js",
            "line": 150,
            "description": "Closes the database. This operation completes immediately and there is no returned Promise.",
            "itemtype": "method",
            "name": "close",
            "params": [
                {
                    "name": "dbName",
                    "description": "",
                    "type": "String"
                }
            ],
            "class": "Offline.DexieService",
            "module": "ember-flexberry-data",
            "namespace": "Offline"
        },
        {
            "file": "addon/services/offline-globals.js",
            "line": 16,
            "description": "Availability of the backend.",
            "itemtype": "property",
            "name": "isOnline",
            "type": "Boolean",
            "default": "false",
            "readonly": "",
            "class": "Offline.GlobalsService",
            "module": "ember-flexberry-data",
            "namespace": "Offline"
        },
        {
            "file": "addon/services/offline-globals.js",
            "line": 25,
            "description": "Possibility of using offline storage.\nGets from application config.",
            "itemtype": "property",
            "name": "isOfflineEnabled",
            "type": "Boolean",
            "default": "true",
            "readonly": "",
            "class": "Offline.GlobalsService",
            "module": "ember-flexberry-data",
            "namespace": "Offline"
        },
        {
            "file": "addon/services/offline-globals.js",
            "line": 35,
            "description": "If true then perform switch to offline mode when got online connection errors.\nGets from application config.",
            "itemtype": "property",
            "name": "isModeSwitchOnErrorsEnabled",
            "type": "Boolean",
            "default": "false",
            "readonly": "",
            "class": "Offline.GlobalsService",
            "module": "ember-flexberry-data",
            "namespace": "Offline"
        },
        {
            "file": "addon/services/offline-globals.js",
            "line": 45,
            "description": "If true then all work with records will sync down when online.\nThis let user to continue work without online connection.\nGets from application config.",
            "itemtype": "property",
            "name": "isSyncDownWhenOnlineEnabled",
            "type": "Boolean",
            "default": "true",
            "readonly": "",
            "class": "Offline.GlobalsService",
            "module": "ember-flexberry-data",
            "namespace": "Offline"
        },
        {
            "file": "addon/services/offline-globals.js",
            "line": 56,
            "description": "If true then record will be synced down completely, i.e. including with all related records with arbitrary nesting.\nOtherwise only requested record will be synced down without related records.\nIf set to true then it may cause errors in case of loops are present in model structure.\nGets from application config.",
            "itemtype": "property",
            "name": "allowSyncDownRelatedRecordsWithoutProjection",
            "type": "Boolean",
            "default": "false",
            "readonly": "",
            "class": "Offline.GlobalsService",
            "module": "ember-flexberry-data",
            "namespace": "Offline"
        },
        {
            "file": "addon/services/offline-globals.js",
            "line": 68,
            "description": "Trigger for \"online is available\" or \"online is unavailable\" event.\nEvent name: online/offline.",
            "itemtype": "method",
            "name": "setOnlineAvailable",
            "params": [
                {
                    "name": "isOnline",
                    "description": "Availability of online to set.",
                    "type": "Boolean"
                }
            ],
            "class": "Offline.GlobalsService",
            "module": "ember-flexberry-data",
            "namespace": "Offline"
        },
        {
            "file": "addon/services/offline-globals.js",
            "line": 82,
            "description": "Get online status.\nAlways returns 'true' by default.\nNeeds for overload when using on mobile devices.",
            "itemtype": "method",
            "name": "checkOnlineAvailable",
            "return": {
                "description": "Returns online status on current device.",
                "type": "Boolean"
            },
            "class": "Offline.GlobalsService",
            "module": "ember-flexberry-data",
            "namespace": "Offline"
        },
        {
            "file": "addon/services/offline-globals.js",
            "line": 115,
            "description": "Get offline schema.",
            "itemtype": "method",
            "name": "getOfflineSchema",
            "return": {
                "description": "Returns offline schema.",
                "type": "Object"
            },
            "class": "Offline.GlobalsService",
            "module": "ember-flexberry-data",
            "namespace": "Offline"
        },
        {
            "file": "addon/services/syncer.js",
            "line": 22,
            "description": "Store that use for making requests in offline mode.\nBy default it is set to global instane of {{#crossLink \"LocalStore\"}}{{/crossLink}} class.",
            "itemtype": "property",
            "name": "offlineStore",
            "type": "<a href=\"http://emberjs.com/api/data/classes/DS.Store.html\">DS.Store</a>",
            "class": "Offline.Syncer",
            "module": "ember-flexberry-data",
            "namespace": "Offline"
        },
        {
            "file": "addon/services/syncer.js",
            "line": 31,
            "description": "Number of \"main\" records (include related records for relationships) that should be accumulated before bulk operation will be performed.",
            "itemtype": "property",
            "name": "numberOfRecordsForPerformingBulkOperations",
            "type": "Number",
            "default": "10",
            "class": "Offline.Syncer",
            "module": "ember-flexberry-data",
            "namespace": "Offline"
        },
        {
            "file": "addon/services/syncer.js",
            "line": 40,
            "description": "Allows to enable or disable continuation of syncing down if error occurs.",
            "itemtype": "property",
            "name": "queueContinueOnError",
            "type": "Boolean",
            "default": "true",
            "class": "Offline.Syncer",
            "module": "ember-flexberry-data",
            "namespace": "Offline"
        },
        {
            "file": "addon/services/syncer.js",
            "line": 49,
            "class": "Offline.Syncer",
            "module": "ember-flexberry-data",
            "namespace": "Offline"
        },
        {
            "file": "addon/services/syncer.js",
            "line": 53,
            "description": "Initialize offline store.",
            "itemtype": "method",
            "name": "init",
            "access": "private",
            "tagname": "",
            "class": "Offline.Syncer",
            "module": "ember-flexberry-data",
            "namespace": "Offline"
        },
        {
            "file": "addon/services/syncer.js",
            "line": 69,
            "description": "Save specified records into local store (IndexedDB).",
            "itemtype": "method",
            "name": "syncDown",
            "access": "public",
            "tagname": "",
            "params": [
                {
                    "name": "descriptor",
                    "description": "typeName, record, records.",
                    "type": "String|DS.Model|Array"
                },
                {
                    "name": "reload",
                    "description": "If set to true then syncer perform remote reload for data, otherwise data will get from the store.",
                    "type": "Boolean",
                    "optional": true
                },
                {
                    "name": "projectionName",
                    "description": "Name of projection for remote reload of data. If not set then all properties of record, except navigation properties, will be read.",
                    "type": "String",
                    "optional": true
                },
                {
                    "name": "params",
                    "description": "Additional parameters for syncing down.",
                    "type": "Object",
                    "optional": true,
                    "props": [
                        {
                            "name": "queryObject",
                            "description": "QueryObject instance to make query if descriptor is a typeName.",
                            "type": "Query.QueryObject",
                            "optional": true
                        },
                        {
                            "name": "unloadSyncedRecords",
                            "description": "If set to true then synced records will be unloaded from online store.",
                            "type": "Boolean",
                            "optional": true
                        }
                    ]
                }
            ],
            "return": {
                "description": "",
                "type": "Promise"
            },
            "class": "Offline.Syncer",
            "module": "ember-flexberry-data",
            "namespace": "Offline"
        },
        {
            "file": "addon/services/syncer.js",
            "line": 124,
            "description": "Remove all records in local store.",
            "itemtype": "method",
            "name": "",
            "access": "public",
            "tagname": "",
            "class": "Offline.Syncer",
            "module": "ember-flexberry-data",
            "namespace": "Offline"
        },
        {
            "file": "addon/services/syncer.js",
            "line": 134,
            "description": "Saves data to local store.",
            "itemtype": "method",
            "name": "_syncDownRecord",
            "params": [
                {
                    "name": "store",
                    "description": "Store of application.",
                    "type": "DS.Store or Subclass"
                },
                {
                    "name": "record",
                    "description": "Record to save in local store.",
                    "type": "DS.Model"
                },
                {
                    "name": "reload",
                    "description": "If set to true then syncer perform remote reload for data, otherwise data will get from the store.",
                    "type": "Boolean",
                    "optional": true
                },
                {
                    "name": "projectionName",
                    "description": "Name of projection for remote reload of data. If not set then all properties of record, except navigation properties, will be read.",
                    "type": "String",
                    "optional": true
                },
                {
                    "name": "params",
                    "description": "Additional parameters for syncing down.",
                    "type": "Object",
                    "optional": true,
                    "props": [
                        {
                            "name": "queryObject",
                            "description": "QueryObject instance to make query if descriptor is a typeName.",
                            "type": "Query.QueryObject",
                            "optional": true
                        },
                        {
                            "name": "unloadSyncedRecords",
                            "description": "If set to true then synced records will be unloaded from online store.",
                            "type": "Boolean",
                            "optional": true
                        }
                    ]
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "Offline.Syncer",
            "module": "ember-flexberry-data",
            "namespace": "Offline"
        },
        {
            "file": "addon/services/syncer.js",
            "line": 193,
            "description": "Start sync up process.",
            "itemtype": "method",
            "name": "syncUp",
            "params": [
                {
                    "name": "jobs",
                    "description": "Array instances of `auditEntity` model for sync up.",
                    "type": "Ember.Array",
                    "optional": true
                },
                {
                    "name": "options",
                    "description": "Object with options for sync up.",
                    "type": "Object",
                    "optional": true,
                    "props": [
                        {
                            "name": "continueOnError",
                            "description": "If `true` continue sync up if an error occurred.",
                            "type": "Boolean",
                            "optional": true
                        },
                        {
                            "name": "useBatchUpdate",
                            "description": "Do sync up through batch update or not.",
                            "type": "Boolean",
                            "optional": true
                        }
                    ]
                }
            ],
            "return": {
                "description": "",
                "type": "Promise"
            },
            "class": "Offline.Syncer",
            "module": "ember-flexberry-data",
            "namespace": "Offline"
        },
        {
            "file": "addon/services/syncer.js",
            "line": 228,
            "description": "This method is called when a sync process if at attempt create, update or delete record, server error return.\nDefault behavior: Marked `job` as 'Ошибка', execute further when called `syncUp` method.",
            "example": [
                "\n  ```javascript\n  // app/services/syncer.js\n  import { Offline } from 'ember-flexberry-data';\n\n  export default Offline.Syncer.extend({\n    ...\n    resolveServerError(job, error) {\n      let _this = this;\n      return new Ember.RSVP.Promise((resolve, reject) => {\n        // Here `error.status` as example, as if user not authorized on server.\n        if (error.status === 401) {\n          // As if `auth` function authorize user.\n          auth().then(() => {\n            _this.syncUp(Ember.A([job])).then(() => {\n              job.set('executionResult', 'Выполнено');\n              resolve(job.save());\n            }, reject);\n          }, reject);\n        } else {\n          job.set('executionResult', 'Ошибка');\n          resolve(job.save());\n        }\n      });\n    },\n    ...\n  });\n\n  ```"
            ],
            "itemtype": "method",
            "name": "resolveServerError",
            "params": [
                {
                    "name": "job",
                    "description": "Instance of `auditEntity` model when restore which error occurred.",
                    "type": "subclass of DS.Model"
                },
                {
                    "name": "error",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "Promise that resolves updated job.",
                "type": "Promise"
            },
            "class": "Offline.Syncer",
            "module": "ember-flexberry-data",
            "namespace": "Offline"
        },
        {
            "file": "addon/services/syncer.js",
            "line": 273,
            "description": "This method is called when a sync process not found record on server for delete or update.\nDefault behavior: Marked `job` as 'Не выполнено', not delete and not execute further when called `syncUp` method.",
            "example": [
                "\n  ```javascript\n  // app/services/syncer.js\n  import { Offline } from 'ember-flexberry-data';\n\n  export default Offline.Syncer.extend({\n    ...\n    resolveNotFoundRecord(job) {\n      if (job.get('operationType') === 'UPDATE') {\n        // It will be executed when next called `syncUp` method.\n        job.set('executionResult', 'Ошибка');\n      } else if (job.get('operationType') === 'DELETE') {\n        // It will be immediately delete and not never executed.\n        job.set('executionResult', 'Выполнено');\n      }\n\n      return job.save();\n    },\n    ...\n  });\n\n  ```"
            ],
            "itemtype": "method",
            "name": "resolveNotFoundRecord",
            "params": [
                {
                    "name": "job",
                    "description": "Instance of `auditEntity` model when restore which error occurred.",
                    "type": "subclass of DS.Model"
                }
            ],
            "return": {
                "description": "Promise that resolves updated job.",
                "type": "Promise"
            },
            "class": "Offline.Syncer",
            "module": "ember-flexberry-data",
            "namespace": "Offline"
        },
        {
            "file": "addon/services/syncer.js",
            "line": 309,
            "class": "Offline.Syncer",
            "module": "ember-flexberry-data",
            "namespace": "Offline"
        },
        {
            "file": "addon/services/syncer.js",
            "line": 319,
            "description": "Return name of projection to sync up by model name.",
            "itemtype": "method",
            "name": "getSyncUpProjectionName",
            "params": [
                {
                    "name": "modelName",
                    "description": "Name of model to get sync up projection name.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "Name of projection to sync up."
            },
            "class": "Offline.Syncer",
            "module": "ember-flexberry-data",
            "namespace": "Offline"
        },
        {
            "file": "addon/services/syncer.js",
            "line": 342,
            "class": "Offline.Syncer",
            "module": "ember-flexberry-data",
            "namespace": "Offline"
        },
        {
            "file": "addon/services/syncer.js",
            "line": 370,
            "description": "Starts syncing up through batch.",
            "params": [
                {
                    "name": "store",
                    "description": "",
                    "type": "DS.Store"
                },
                {
                    "name": "jobs",
                    "description": "",
                    "type": "Array"
                }
            ],
            "class": "Offline.Syncer",
            "module": "ember-flexberry-data",
            "namespace": "Offline"
        },
        {
            "file": "addon/services/syncer.js",
            "line": 411,
            "class": "Offline.Syncer",
            "module": "ember-flexberry-data",
            "namespace": "Offline"
        },
        {
            "file": "addon/services/syncer.js",
            "line": 427,
            "class": "Offline.Syncer",
            "module": "ember-flexberry-data",
            "namespace": "Offline"
        },
        {
            "file": "addon/services/syncer.js",
            "line": 441,
            "description": "Returns record to create for syncing up.",
            "params": [
                {
                    "name": "store",
                    "description": "Store.",
                    "type": "DS.Store"
                },
                {
                    "name": "job",
                    "description": "Job for sync up.",
                    "type": "DS.Model"
                }
            ],
            "class": "Offline.Syncer",
            "module": "ember-flexberry-data",
            "namespace": "Offline"
        },
        {
            "file": "addon/services/syncer.js",
            "line": 459,
            "class": "Offline.Syncer",
            "module": "ember-flexberry-data",
            "namespace": "Offline"
        },
        {
            "file": "addon/services/syncer.js",
            "line": 474,
            "description": "Returns record to update for syncing up.",
            "params": [
                {
                    "name": "store",
                    "description": "Store.",
                    "type": "DS.Store"
                },
                {
                    "name": "job",
                    "description": "Job for sync up.",
                    "type": "DS.Model"
                }
            ],
            "class": "Offline.Syncer",
            "module": "ember-flexberry-data",
            "namespace": "Offline"
        },
        {
            "file": "addon/services/syncer.js",
            "line": 494,
            "class": "Offline.Syncer",
            "module": "ember-flexberry-data",
            "namespace": "Offline"
        },
        {
            "file": "addon/services/syncer.js",
            "line": 510,
            "description": "Returns record to remove for syncing up.",
            "params": [
                {
                    "name": "store",
                    "description": "Store.",
                    "type": "DS.Store"
                },
                {
                    "name": "job",
                    "description": "Job for sync up.",
                    "type": "DS.Model"
                }
            ],
            "class": "Offline.Syncer",
            "module": "ember-flexberry-data",
            "namespace": "Offline"
        },
        {
            "file": "addon/services/syncer.js",
            "line": 528,
            "class": "Offline.Syncer",
            "module": "ember-flexberry-data",
            "namespace": "Offline"
        },
        {
            "file": "addon/services/syncer.js",
            "line": 544,
            "class": "Offline.Syncer",
            "module": "ember-flexberry-data",
            "namespace": "Offline"
        },
        {
            "file": "addon/services/syncer.js",
            "line": 553,
            "class": "Offline.Syncer",
            "module": "ember-flexberry-data",
            "namespace": "Offline"
        },
        {
            "file": "addon/services/syncer.js",
            "line": 559,
            "class": "Offline.Syncer",
            "module": "ember-flexberry-data",
            "namespace": "Offline"
        },
        {
            "file": "addon/services/syncer.js",
            "line": 586,
            "class": "Offline.Syncer",
            "module": "ember-flexberry-data",
            "namespace": "Offline"
        },
        {
            "file": "addon/services/syncer.js",
            "line": 603,
            "class": "Offline.Syncer",
            "module": "ember-flexberry-data",
            "namespace": "Offline"
        },
        {
            "file": "addon/services/syncer.js",
            "line": 615,
            "class": "Offline.Syncer",
            "module": "ember-flexberry-data",
            "namespace": "Offline"
        },
        {
            "file": "addon/services/syncer.js",
            "line": 637,
            "class": "Offline.Syncer",
            "module": "ember-flexberry-data",
            "namespace": "Offline"
        },
        {
            "file": "addon/services/syncer.js",
            "line": 654,
            "class": "Offline.Syncer",
            "module": "ember-flexberry-data",
            "namespace": "Offline"
        },
        {
            "file": "addon/services/syncer.js",
            "line": 665,
            "class": "Offline.Syncer",
            "module": "ember-flexberry-data",
            "namespace": "Offline"
        },
        {
            "file": "addon/services/syncer.js",
            "line": 711,
            "class": "Offline.Syncer",
            "module": "ember-flexberry-data",
            "namespace": "Offline"
        },
        {
            "file": "addon/services/syncer.js",
            "line": 750,
            "class": "Offline.Syncer",
            "module": "ember-flexberry-data",
            "namespace": "Offline"
        },
        {
            "file": "addon/services/syncer.js",
            "line": 766,
            "class": "Offline.Syncer",
            "module": "ember-flexberry-data",
            "namespace": "Offline"
        },
        {
            "file": "addon/services/user.js",
            "line": 8,
            "class": "Offline.Store",
            "module": "ember-flexberry-data"
        },
        {
            "file": "addon/services/user.js",
            "line": 29,
            "description": "Returns current user name.\n    Method must be overridden if application uses some authentication.",
            "itemtype": "method",
            "name": "getCurrentUserName",
            "return": {
                "description": "Current user name. Returns 'userName' as default value if method is not overridden.",
                "type": "String"
            },
            "class": "Offline.Store",
            "module": "ember-flexberry-data"
        },
        {
            "file": "addon/stores/base-store.js",
            "line": 18,
            "description": "Store offline schemas for all databases.",
            "itemtype": "property",
            "name": "_offlineSchema",
            "type": "Object",
            "access": "private",
            "tagname": "",
            "default": "'Schema of 1 version for internal models addon'",
            "class": "Offline.Store",
            "module": "ember-flexberry-data",
            "namespace": "Offline"
        },
        {
            "file": "addon/stores/base-store.js",
            "line": 34,
            "description": "Store that use for making requests in online mode.\nIt can be specified in application that use offline mode support.\nIf it is not specified then instance of <a href=\"http://emberjs.com/api/data/classes/DS.Store.html\">DS.Store</a>\nis set as value of this property during initialization of {{#crossLink \"BaseStore\"}}{{/crossLink}} class.",
            "itemtype": "property",
            "name": "onlineStore",
            "type": "<a href=\"http://emberjs.com/api/data/classes/DS.Store.html\">DS.Store</a>",
            "class": "Offline.Store",
            "module": "ember-flexberry-data",
            "namespace": "Offline"
        },
        {
            "file": "addon/stores/base-store.js",
            "line": 45,
            "description": "Store that use for making requests in offline mode.\nBy default it is set to global instane of {{#crossLink \"LocalStore\"}}{{/crossLink}} class.",
            "itemtype": "property",
            "name": "offlineStore",
            "type": "<a href=\"http://emberjs.com/api/data/classes/DS.Store.html\">DS.Store</a>",
            "class": "Offline.Store",
            "module": "ember-flexberry-data",
            "namespace": "Offline"
        },
        {
            "file": "addon/stores/base-store.js",
            "line": 55,
            "description": "Set schema for your database.",
            "example": [
                "\n  ```javascript\n  // app/services/store.js\n  ...\n    init() {\n      this.set('offlineSchema', {\n        <name of database>: {\n          <number of version>: {\n            <name of model>: <table definition>,\n          },\n        },\n        dbName: {\n          1: {\n            modelName: 'id,attribute1,attribute2,belongsToRelationship1,belongsToRelationship2,*hasManyRelationship1,*hasManyRelationship2',\n            changedModelName: 'id,attribute1,attribute2',\n            thisModelWillBeRemovedInNextVersion: 'id,attribute1',\n          },\n          2: {\n            newModelName: 'id,attribute1',\n            changedModelName: 'id,attribute1,attribute3,attribute4',\n            thisModelWillBeRemovedInNextVersion: null,\n          },\n        },\n      });\n      return this._super(...arguments);\n    },\n  ...\n  ```"
            ],
            "itemtype": "property",
            "name": "offlineSchema",
            "type": "Object",
            "class": "Offline.Store",
            "module": "ember-flexberry-data",
            "namespace": "Offline"
        },
        {
            "file": "addon/stores/base-store.js",
            "line": 111,
            "description": "Add model names that be loaded from offline store.",
            "example": [
                "\n  ```javascript\n  // app/services/store.js\n  ...\n    offlineModels: {\n      myModel: true,\n    },\n  ...\n  ```"
            ],
            "itemtype": "property",
            "name": "offlineModels",
            "type": "Object",
            "default": "{}",
            "class": "Offline.Store",
            "module": "ember-flexberry-data",
            "namespace": "Offline"
        },
        {
            "file": "addon/stores/base-store.js",
            "line": 130,
            "description": "Global instance of {{#crossLink \"Syncer\"}}{{/crossLink}} class that contains methods to sync model.",
            "itemtype": "property",
            "name": "syncer",
            "type": "Syncer",
            "readonly": "",
            "class": "Offline.Store",
            "module": "ember-flexberry-data",
            "namespace": "Offline"
        },
        {
            "file": "addon/stores/base-store.js",
            "line": 139,
            "description": "Instance of dexie service.",
            "itemtype": "property",
            "name": "dexieService",
            "type": "Offline.DexieService",
            "class": "Offline.Store",
            "module": "ember-flexberry-data",
            "namespace": "Offline"
        },
        {
            "file": "addon/stores/base-store.js",
            "line": 168,
            "description": "This method returns a fresh collection from the server, regardless of if there is already records\nin the store or not.",
            "itemtype": "method",
            "name": "findAll",
            "params": [
                {
                    "name": "modelName",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "options",
                    "description": "",
                    "type": "Object",
                    "props": [
                        {
                            "name": "useOnlineStore",
                            "description": "Allow to explicitly specify online or offline store using independently of global online status",
                            "type": "Boolean",
                            "optional": true
                        }
                    ]
                }
            ],
            "return": {
                "description": "promise",
                "type": "Promise"
            },
            "class": "Offline.Store",
            "module": "ember-flexberry-data",
            "namespace": "Offline"
        },
        {
            "file": "addon/stores/base-store.js",
            "line": 189,
            "description": "This method returns a record for a given type and id combination.\nNOTE: this will trigger syncUp twice, this is OK. And since this is\n a public method, we probably want to preserve this.",
            "itemtype": "method",
            "name": "findRecord",
            "params": [
                {
                    "name": "modelName",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "id",
                    "description": "",
                    "type": "String|Integer"
                },
                {
                    "name": "options",
                    "description": "",
                    "type": "Object",
                    "props": [
                        {
                            "name": "useOnlineStore",
                            "description": "Allow to explicitly specify online or offline store using independently of global online status",
                            "type": "Boolean",
                            "optional": true
                        }
                    ]
                }
            ],
            "return": {
                "description": "promise",
                "type": "Promise"
            },
            "class": "Offline.Store",
            "module": "ember-flexberry-data",
            "namespace": "Offline"
        },
        {
            "file": "addon/stores/base-store.js",
            "line": 214,
            "description": "Query for records that meet certain criteria. Resolves with [DS.RecordArray](http://emberjs.com/api/data/classes/DS.RecordArray.html).\n\tFor more information see [query method](http://emberjs.com/api/data/classes/DS.Store.html#method_query) of [DS.Store](http://emberjs.com/api/data/classes/DS.Store.html).",
            "itemtype": "method",
            "name": "query",
            "params": [
                {
                    "name": "modelName",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "query",
                    "description": "",
                    "type": "Object",
                    "props": [
                        {
                            "name": "useOnlineStore",
                            "description": "Allow to explicitly specify online or offline store using independently of global online status",
                            "type": "Boolean",
                            "optional": true
                        }
                    ]
                }
            ],
            "return": {
                "description": "promise",
                "type": "Promise"
            },
            "class": "Offline.Store",
            "module": "ember-flexberry-data",
            "namespace": "Offline"
        },
        {
            "file": "addon/stores/base-store.js",
            "line": 244,
            "description": "Query for record that meet certain criteria. Resolves with single record.",
            "itemtype": "method",
            "name": "query",
            "params": [
                {
                    "name": "modelName",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "query",
                    "description": "",
                    "type": "Object",
                    "props": [
                        {
                            "name": "useOnlineStore",
                            "description": "Allow to explicitly specify online or offline store using independently of global online status",
                            "type": "Boolean",
                            "optional": true
                        }
                    ]
                }
            ],
            "return": {
                "description": "promise",
                "type": "Promise"
            },
            "class": "Offline.Store",
            "module": "ember-flexberry-data",
            "namespace": "Offline"
        },
        {
            "file": "addon/stores/base-store.js",
            "line": 273,
            "description": "Create a new record in the current store. The properties passed to this method are set on the newly created record.",
            "itemtype": "method",
            "name": "createRecord",
            "params": [
                {
                    "name": "modelName",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "inputProperties",
                    "description": "A hash of properties to set on the newly created record.",
                    "type": "Object"
                },
                {
                    "name": "useOnlineStore",
                    "description": "Allow to explicitly specify online or offline store using independently of global online status",
                    "type": "Boolean",
                    "optional": true
                }
            ],
            "return": {
                "description": "promise",
                "type": "Promise"
            },
            "class": "Offline.Store",
            "module": "ember-flexberry-data",
            "namespace": "Offline"
        },
        {
            "file": "addon/stores/base-store.js",
            "line": 285,
            "description": "For symmetry, a record can be deleted via the store.",
            "itemtype": "method",
            "name": "deleteRecord",
            "params": [
                {
                    "name": "record",
                    "description": "",
                    "type": "DS.Model"
                },
                {
                    "name": "useOnlineStore",
                    "description": "Allow to explicitly specify online or offline store using independently of global online status",
                    "type": "Boolean",
                    "optional": true
                }
            ],
            "class": "Offline.Store",
            "module": "ember-flexberry-data",
            "namespace": "Offline"
        },
        {
            "file": "addon/stores/base-store.js",
            "line": 295,
            "description": "Delete all record from the current store.",
            "itemtype": "method",
            "name": "deleteRecord",
            "params": [
                {
                    "name": "record",
                    "description": "",
                    "type": "DS.Model"
                },
                {
                    "name": "useOnlineStore",
                    "description": "Allow to explicitly specify online or offline store using independently of global online status",
                    "type": "Boolean",
                    "optional": true
                }
            ],
            "class": "Offline.Store",
            "module": "ember-flexberry-data",
            "namespace": "Offline"
        },
        {
            "file": "addon/stores/base-store.js",
            "line": 305,
            "description": "Get the reference for the specified record.",
            "itemtype": "method",
            "name": "getReference",
            "params": [
                {
                    "name": "type",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "id",
                    "description": "",
                    "type": "String|Integer"
                },
                {
                    "name": "useOnlineStore",
                    "description": "Allow to explicitly specify online or offline store using independently of global online status",
                    "type": "Boolean",
                    "optional": true
                }
            ],
            "return": {
                "description": "promise",
                "type": "RecordReference"
            },
            "class": "Offline.Store",
            "module": "ember-flexberry-data",
            "namespace": "Offline"
        },
        {
            "file": "addon/stores/base-store.js",
            "line": 317,
            "description": "Returns true if a record for a given type and ID is already loaded.",
            "itemtype": "method",
            "name": "hasRecordForId",
            "params": [
                {
                    "name": "modelName",
                    "description": "",
                    "type": "String|DS.Model"
                },
                {
                    "name": "inputId",
                    "description": "",
                    "type": "String|Integer"
                },
                {
                    "name": "useOnlineStore",
                    "description": "Allow to explicitly specify online or offline store using independently of global online status",
                    "type": "Boolean",
                    "optional": true
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "Offline.Store",
            "module": "ember-flexberry-data",
            "namespace": "Offline"
        },
        {
            "file": "addon/stores/base-store.js",
            "line": 329,
            "description": "Converts a json payload into the normalized form that {{#crossLink \"BaseStore/push:method\"}}{{/crossLink}} expects.",
            "itemtype": "method",
            "name": "normalize",
            "params": [
                {
                    "name": "modelName",
                    "description": "The name of the model type for this payload",
                    "type": "String"
                },
                {
                    "name": "payload",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "useOnlineStore",
                    "description": "Allow to explicitly specify online or offline store using independently of global online status",
                    "type": "Boolean",
                    "optional": true
                }
            ],
            "return": {
                "description": "The normalized payload",
                "type": "Object"
            },
            "class": "Offline.Store",
            "module": "ember-flexberry-data",
            "namespace": "Offline"
        },
        {
            "file": "addon/stores/base-store.js",
            "line": 341,
            "description": "This method returns a filtered array that contains all of the known records for a given type in the store.",
            "itemtype": "method",
            "name": "peekAll",
            "params": [
                {
                    "name": "modelName",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "useOnlineStore",
                    "description": "Allow to explicitly specify online or offline store using independently of global online status",
                    "type": "Boolean",
                    "optional": true
                }
            ],
            "return": {
                "description": "",
                "type": "DS.RecordArray"
            },
            "class": "Offline.Store",
            "module": "ember-flexberry-data",
            "namespace": "Offline"
        },
        {
            "file": "addon/stores/base-store.js",
            "line": 352,
            "description": "Get a record by a given type and ID without triggering a fetch.",
            "itemtype": "method",
            "name": "peekRecord",
            "params": [
                {
                    "name": "modelName",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "id",
                    "description": "",
                    "type": "String|Integer"
                },
                {
                    "name": "useOnlineStore",
                    "description": "Allow to explicitly specify online or offline store using independently of global online status",
                    "type": "Boolean",
                    "optional": true
                }
            ],
            "return": {
                "description": "Record",
                "type": "DS.Model|null"
            },
            "class": "Offline.Store",
            "module": "ember-flexberry-data",
            "namespace": "Offline"
        },
        {
            "file": "addon/stores/base-store.js",
            "line": 364,
            "description": "Push some data for a given type into the store.",
            "itemtype": "method",
            "name": "push",
            "params": [
                {
                    "name": "data",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "useOnlineStore",
                    "description": "Allow to explicitly specify online or offline store using independently of global online status",
                    "type": "Boolean",
                    "optional": true
                }
            ],
            "return": {
                "description": "The record(s) that was created or updated.",
                "type": "DS.Model|Array"
            },
            "class": "Offline.Store",
            "module": "ember-flexberry-data",
            "namespace": "Offline"
        },
        {
            "file": "addon/stores/base-store.js",
            "line": 375,
            "description": "Push some raw data into the store.",
            "itemtype": "method",
            "name": "pushPayload",
            "params": [
                {
                    "name": "modelName",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "inputPayload",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "useOnlineStore",
                    "description": "Allow to explicitly specify online or offline store using independently of global online status",
                    "type": "Boolean",
                    "optional": true
                }
            ],
            "class": "Offline.Store",
            "module": "ember-flexberry-data",
            "namespace": "Offline"
        },
        {
            "file": "addon/stores/base-store.js",
            "line": 386,
            "description": "This method returns if a certain record is already loaded in the store.",
            "itemtype": "method",
            "name": "recordIsLoaded",
            "params": [
                {
                    "name": "modelName",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "id",
                    "description": "",
                    "type": "String|Integer"
                },
                {
                    "name": "useOnlineStore",
                    "description": "Allow to explicitly specify online or offline store using independently of global online status",
                    "type": "Boolean",
                    "optional": true
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "Offline.Store",
            "module": "ember-flexberry-data",
            "namespace": "Offline"
        },
        {
            "file": "addon/stores/base-store.js",
            "line": 398,
            "description": "This method unloads all records in the store.",
            "itemtype": "method",
            "name": "unloadAll",
            "params": [
                {
                    "name": "modelName",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "useOnlineStore",
                    "description": "Allow to explicitly specify online or offline store using independently of global online status",
                    "type": "Boolean",
                    "optional": true
                }
            ],
            "class": "Offline.Store",
            "module": "ember-flexberry-data",
            "namespace": "Offline"
        },
        {
            "file": "addon/stores/base-store.js",
            "line": 408,
            "description": "For symmetry, a record can be unloaded via the store. Only non-dirty records can be unloaded.",
            "itemtype": "method",
            "name": "unloadRecord",
            "params": [
                {
                    "name": "record",
                    "description": "",
                    "type": "DS.Model"
                },
                {
                    "name": "useOnlineStore",
                    "description": "Allow to explicitly specify online or offline store using independently of global online status",
                    "type": "Boolean",
                    "optional": true
                }
            ],
            "class": "Offline.Store",
            "module": "ember-flexberry-data",
            "namespace": "Offline"
        },
        {
            "file": "addon/stores/base-store.js",
            "line": 418,
            "description": "Pushes into store the model that exists in backend without a request to it.",
            "itemtype": "method",
            "name": "createExistingRecord",
            "params": [
                {
                    "name": "modelName",
                    "description": "Name of the model to push into store.",
                    "type": "String"
                },
                {
                    "name": "primaryKey",
                    "description": "Primery key of the model to push into store.",
                    "type": "String"
                },
                {
                    "name": "useOnlineStore",
                    "description": "Allow to explicitly specify online or offline store using independently of global online status",
                    "type": "Boolean",
                    "optional": true
                }
            ],
            "class": "Offline.Store",
            "module": "ember-flexberry-data",
            "namespace": "Offline"
        },
        {
            "file": "addon/stores/base-store.js",
            "line": 429,
            "description": "A method to send batch update, create or delete models in single transaction.\n\nAll models saving using this method must have identifiers.\n\nThe array which fulfilled the promise may contain the following values:\n- `same model object` - for created, updated or unaltered records.\n- `null` - for deleted records.",
            "itemtype": "method",
            "name": "batchUpdate",
            "params": [
                {
                    "name": "models",
                    "description": "Is array of models or single model for batch update.",
                    "type": "DS.Model[]|DS.Model"
                },
                {
                    "name": "useOnlineStore",
                    "description": "Allow to explicitly specify online or offline store using independently of global online status.",
                    "type": "Boolean",
                    "optional": true
                }
            ],
            "return": {
                "description": "A promise that fulfilled with an array of models in the new state.",
                "type": "Promise"
            },
            "class": "Offline.Store",
            "module": "ember-flexberry-data",
            "namespace": "Offline"
        },
        {
            "file": "addon/stores/base-store.js",
            "line": 447,
            "description": "Returns an instance of the adapter for a given type.",
            "itemtype": "method",
            "name": "adapterFor",
            "params": [
                {
                    "name": "modelName",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "useOnlineStore",
                    "description": "Allow to explicitly specify online or offline store using independently of global online status",
                    "type": "Boolean",
                    "optional": true
                }
            ],
            "return": {
                "description": "Adapter",
                "type": "DS.Adapter or subclass"
            },
            "class": "Offline.Store",
            "module": "ember-flexberry-data",
            "namespace": "Offline"
        },
        {
            "file": "addon/stores/base-store.js",
            "line": 466,
            "description": "Returns an instance of the serializer for a given type.",
            "itemtype": "method",
            "name": "serializerFor",
            "params": [
                {
                    "name": "modelName",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "useOnlineStore",
                    "description": "Allow to explicitly specify online or offline store using independently of global online status",
                    "type": "Boolean",
                    "optional": true
                }
            ],
            "return": {
                "description": "Serializer",
                "type": "DS.Serializer or subclass"
            },
            "class": "Offline.Store",
            "module": "ember-flexberry-data",
            "namespace": "Offline"
        },
        {
            "file": "addon/stores/base-store.js",
            "line": 524,
            "description": "Detect model name by method name and arguments.",
            "itemtype": "method",
            "name": "_getModelName",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "methodName",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "methodArguments",
                    "description": "",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "",
                "type": "String"
            },
            "class": "Offline.Store",
            "module": "ember-flexberry-data",
            "namespace": "Offline"
        },
        {
            "file": "addon/stores/base-store.js",
            "line": 571,
            "description": "Update all databases in accordance with actual schemas.",
            "itemtype": "method",
            "name": "_dbInit",
            "access": "private",
            "tagname": "",
            "class": "Offline.Store",
            "module": "ember-flexberry-data",
            "namespace": "Offline"
        },
        {
            "file": "addon/stores/local-store.js",
            "line": 19,
            "description": "Database name for IndexedDB.",
            "itemtype": "property",
            "name": "dbName",
            "type": "String",
            "default": "'ember-flexberry-data'",
            "class": "Offline.LocalStore",
            "module": "ember-flexberry-data",
            "namespace": "Offline"
        },
        {
            "file": "addon/stores/local-store.js",
            "line": 35,
            "description": "Initializing instance.\n[More info](http://emberjs.com/api/data/classes/DS.Store.html#method_init).",
            "itemtype": "method",
            "name": "init",
            "class": "Offline.LocalStore",
            "module": "ember-flexberry-data",
            "namespace": "Offline"
        },
        {
            "file": "addon/stores/local-store.js",
            "line": 48,
            "description": "Returns an instance of the serializer for a given type.\nOffline serializers should have name with postfix '-offline'.",
            "itemtype": "method",
            "name": "serializerFor",
            "params": [
                {
                    "name": "modelName",
                    "description": "The name of the model type.",
                    "type": "String"
                }
            ],
            "access": "public",
            "tagname": "",
            "class": "Offline.LocalStore",
            "module": "ember-flexberry-data",
            "namespace": "Offline"
        },
        {
            "file": "addon/stores/local-store.js",
            "line": 69,
            "description": "Returns an instance of the adapter for a given type.\nOffline adapters should have name with postfix '-offline'.",
            "itemtype": "method",
            "name": "adapterFor",
            "params": [
                {
                    "name": "modelName",
                    "description": "The name of the model type.",
                    "type": "String"
                }
            ],
            "access": "public",
            "tagname": "",
            "class": "Offline.LocalStore",
            "module": "ember-flexberry-data",
            "namespace": "Offline"
        },
        {
            "file": "addon/stores/local-store.js",
            "line": 90,
            "description": "Finds the records for the given model type.\n\nSee {{#crossLink \"DS.Store/findAll:method\"}}{{/crossLink}} for details.",
            "itemtype": "method",
            "name": "findAll",
            "access": "public",
            "tagname": "",
            "params": [
                {
                    "name": "modelName",
                    "description": "The name of the model type.",
                    "type": "String"
                },
                {
                    "name": "options",
                    "description": "Options.",
                    "type": "Object",
                    "optional": true,
                    "props": [
                        {
                            "name": "projection",
                            "description": "Projection name.",
                            "type": "String"
                        }
                    ]
                }
            ],
            "return": {
                "description": "Records promise.",
                "type": "DS.AdapterPopulatedRecordArray"
            },
            "class": "Offline.LocalStore",
            "module": "ember-flexberry-data",
            "namespace": "Offline"
        },
        {
            "file": "addon/stores/local-store.js",
            "line": 121,
            "description": "Returns a record for a given type and id combination.\n\nSee {{#crossLink \"DS.Store/findRecord:method\"}}{{/crossLink}} for details.",
            "itemtype": "method",
            "name": "findRecord",
            "access": "public",
            "tagname": "",
            "params": [
                {
                    "name": "modelName",
                    "description": "The name of the model type.",
                    "type": "String"
                },
                {
                    "name": "id",
                    "description": "Record ID.",
                    "type": "String|Integer"
                },
                {
                    "name": "options",
                    "description": "Options.",
                    "type": "Object",
                    "optional": true,
                    "props": [
                        {
                            "name": "projection",
                            "description": "Projection name.",
                            "type": "String"
                        }
                    ]
                }
            ],
            "return": {
                "description": "Record promise.",
                "type": "Promise"
            },
            "class": "Offline.LocalStore",
            "module": "ember-flexberry-data",
            "namespace": "Offline"
        },
        {
            "file": "addon/stores/local-store.js",
            "line": 154,
            "description": "This method delegates a query to the adapter.\n\nSee {{#crossLink \"DS.Store/query:method\"}}{{/crossLink}} for details.",
            "itemtype": "method",
            "name": "query",
            "access": "public",
            "tagname": "",
            "params": [
                {
                    "name": "modelName",
                    "description": "The name of the model type.",
                    "type": "String"
                },
                {
                    "name": "query",
                    "description": "An opaque query to be used by the adapter.",
                    "type": "Object",
                    "props": [
                        {
                            "name": "projection",
                            "description": "Projection name.",
                            "type": "String",
                            "optional": true
                        }
                    ]
                }
            ],
            "return": {
                "description": "A promise, which is resolved with a\n                  {{#crossLink \"DS.RecordArray\"}}RecordArray{{/crossLink}}\n                  once the server returns.",
                "type": "Promise"
            },
            "class": "Offline.LocalStore",
            "module": "ember-flexberry-data",
            "namespace": "Offline"
        },
        {
            "file": "addon/stores/local-store.js",
            "line": 186,
            "description": "This method delegates a query to the adapter.\n\nSee {{#crossLink \"DS.Store/queryRecord:method\"}}{{/crossLink}} for details.",
            "itemtype": "method",
            "name": "queryRecord",
            "access": "public",
            "tagname": "",
            "params": [
                {
                    "name": "modelName",
                    "description": "The name of the model type.",
                    "type": "String"
                },
                {
                    "name": "query",
                    "description": "An opaque query to be used by the adapter.",
                    "type": "Object",
                    "props": [
                        {
                            "name": "projection",
                            "description": "Projection name.",
                            "type": "String",
                            "optional": true
                        }
                    ]
                }
            ],
            "return": {
                "description": "A promise, which is resolved with a\n                  {{#crossLink \"DS.RecordObject\"}}RecordObject{{/crossLink}}\n                  once the server returns.",
                "type": "Promise"
            },
            "class": "Offline.LocalStore",
            "module": "ember-flexberry-data",
            "namespace": "Offline"
        },
        {
            "file": "addon/stores/local-store.js",
            "line": 216,
            "description": "Delete all record from the current store.",
            "itemtype": "method",
            "name": "deleteRecord",
            "params": [
                {
                    "name": "modelName",
                    "description": "modelName",
                    "type": "String"
                },
                {
                    "name": "filter",
                    "description": "filter",
                    "type": "Object"
                }
            ],
            "class": "Offline.LocalStore",
            "module": "ember-flexberry-data",
            "namespace": "Offline"
        },
        {
            "file": "addon/stores/local-store.js",
            "line": 231,
            "description": "A method to send batch update, create or delete models in single transaction.\n\nAll models saving using this method must have identifiers.\n\nThe array which fulfilled the promise may contain the following values:\n- `same model object` - for created, updated or unaltered records.\n- `null` - for deleted records.",
            "itemtype": "method",
            "name": "batchUpdate",
            "params": [
                {
                    "name": "models",
                    "description": "Is array of models or single model for batch update.",
                    "type": "DS.Model[]|DS.Model"
                }
            ],
            "return": {
                "description": "A promise that fulfilled with an array of models in the new state.",
                "type": "Promise"
            },
            "class": "Offline.LocalStore",
            "module": "ember-flexberry-data",
            "namespace": "Offline"
        },
        {
            "file": "addon/stores/local-store.js",
            "line": 248,
            "description": "Pushes into store the model that exists in backend without a request to it.",
            "params": [
                {
                    "name": "modelName",
                    "description": "Name of the model to push into store.",
                    "type": "String"
                },
                {
                    "name": "primaryKey",
                    "description": "Primery key of the model to push into store.",
                    "type": "String"
                }
            ],
            "class": "Offline.LocalStore",
            "module": "ember-flexberry-data",
            "namespace": "Offline"
        },
        {
            "file": "addon/stores/online-store.js",
            "line": 18,
            "description": "Delete all record from the current store.",
            "itemtype": "method",
            "name": "deleteRecord",
            "params": [
                {
                    "name": "modelName",
                    "description": "modelName",
                    "type": "String"
                },
                {
                    "name": "filter",
                    "description": "filter",
                    "type": "Object"
                }
            ],
            "class": "OData.OnlineStore",
            "module": "ember-flexberry-data",
            "namespace": "OData"
        },
        {
            "file": "addon/stores/online-store.js",
            "line": 33,
            "description": "A method to send batch update, create or delete models in single transaction.\n\nAll models saving using this method must have identifiers.\n\nThe array which fulfilled the promise may contain the following values:\n- `same model object` - for created, updated or unaltered records.\n- `null` - for deleted records.",
            "itemtype": "method",
            "name": "batchUpdate",
            "params": [
                {
                    "name": "models",
                    "description": "Is array of models or single model for batch update.",
                    "type": "DS.Model[]|DS.Model"
                }
            ],
            "return": {
                "description": "A promise that fulfilled with an array of models in the new state.",
                "type": "Promise"
            },
            "class": "OData.OnlineStore",
            "module": "ember-flexberry-data",
            "namespace": "OData"
        },
        {
            "file": "addon/stores/online-store.js",
            "line": 50,
            "description": "Pushes into store the model that exists in backend without a request to it.",
            "params": [
                {
                    "name": "modelName",
                    "description": "Name of the model to push into store.",
                    "type": "String"
                },
                {
                    "name": "primaryKey",
                    "description": "Primery key of the model to push into store.",
                    "type": "String"
                }
            ],
            "class": "OData.OnlineStore",
            "module": "ember-flexberry-data",
            "namespace": "OData"
        },
        {
            "file": "addon/transforms/decimal.js",
            "line": 25,
            "description": "Deserializes serialized attribute value.",
            "class": "DecimalTransform",
            "module": "ember-flexberry-data"
        },
        {
            "file": "addon/transforms/decimal.js",
            "line": 32,
            "description": "Serializes deserialized attribute value.",
            "class": "DecimalTransform",
            "module": "ember-flexberry-data"
        },
        {
            "file": "addon/transforms/file.js",
            "line": 25,
            "description": "Deserializes serialized attribute value.",
            "class": "FileTransform",
            "module": "ember-flexberry-data"
        },
        {
            "file": "addon/transforms/file.js",
            "line": 33,
            "description": "Serializes deserialized attribute value.",
            "class": "FileTransform",
            "module": "ember-flexberry-data"
        },
        {
            "file": "addon/transforms/flexberry-enum.js",
            "line": 18,
            "description": "Object that contains enum values and corresponding captions.\nMust be overridden in inherited classes.\n\nShould be defined in app/enums/.",
            "example": [
                "\n  ```js\n  // app/enums/order-status.js\n  import { createEnum } from 'ember-flexberry/utils/enum-functions';\n\n  export default createEnum({\n    Paid: 'Paid',\n    InProcess: 'In process',\n    Sent: 'Sent',\n    Arrived: 'Arrived',\n    NotArrived: 'Not arrived',\n    Unknown: 'Unknown'\n  });\n\n  // app/transforms/order-status\n  import FlexberryEnum from 'ember-flexberry/transforms/flexberry-enum';\n  import OrderStatus from '../enums/order-status';\n\n  export default FlexberryEnum.extend({\n    enum: OrderStatus\n  });\n  ```"
            ],
            "itemtype": "property",
            "name": "enum",
            "type": "Object",
            "class": "FlexberryEnumTransform",
            "module": "ember-flexberry-data"
        },
        {
            "file": "addon/transforms/flexberry-enum.js",
            "line": 52,
            "description": "Object with inversed enum, value from enum property will be is property here.",
            "itemtype": "property",
            "name": "inverse",
            "type": "Object",
            "readonly": "",
            "class": "FlexberryEnumTransform",
            "module": "ember-flexberry-data"
        },
        {
            "file": "addon/transforms/flexberry-enum.js",
            "line": 61,
            "description": "Array that contains all values of enum properties.",
            "itemtype": "property",
            "name": "captions",
            "type": "Array",
            "readonly": "",
            "class": "FlexberryEnumTransform",
            "module": "ember-flexberry-data"
        },
        {
            "file": "addon/transforms/flexberry-enum.js",
            "line": 70,
            "description": "An overridable method called when objects are instantiated.\nFor more information see [init](http://emberjs.com/api/classes/Ember.View.html#method_init) method of [Ember.View](http://emberjs.com/api/classes/Ember.View.html).",
            "class": "FlexberryEnumTransform",
            "module": "ember-flexberry-data"
        },
        {
            "file": "addon/transforms/flexberry-enum.js",
            "line": 84,
            "description": "Returns deserialized enumeration field.\nReturns `null` or `undefined` if `serialized` has one of these values.",
            "itemtype": "method",
            "name": "deserialize",
            "params": [
                {
                    "name": "serialized",
                    "description": "Serialized enumeration field",
                    "type": "String|Number"
                }
            ],
            "return": {
                "description": "Deserialized enumeration field",
                "type": "String"
            },
            "class": "FlexberryEnumTransform",
            "module": "ember-flexberry-data"
        },
        {
            "file": "addon/transforms/flexberry-enum.js",
            "line": 106,
            "description": "Returns serialized enumeration field.\nReturns `null` or `undefined` if `deserialized` has one of these values.",
            "itemtype": "method",
            "name": "serialize",
            "params": [
                {
                    "name": "deserialized",
                    "description": "Deserialized enumeration field",
                    "type": "String"
                }
            ],
            "return": {
                "description": "Serialized enumeration field",
                "type": "String|Number"
            },
            "class": "FlexberryEnumTransform",
            "module": "ember-flexberry-data"
        },
        {
            "file": "addon/transforms/flexberry-enum.js",
            "line": 129,
            "description": "Flag: indicates whether class represents enumeration.\nIt is useful in cases when we need to determine that the model attribute type is an enumeration.",
            "static": 1,
            "itemtype": "property",
            "name": "isEnum",
            "type": "Boolean",
            "default": "true",
            "class": "FlexberryEnumTransform",
            "module": "ember-flexberry-data"
        },
        {
            "file": "addon/transforms/flexberry-enum.js",
            "line": 141,
            "description": "Source type name from the backend.",
            "itemtype": "property",
            "name": "sourceType",
            "type": "String",
            "default": "null",
            "class": "FlexberryEnumTransform",
            "module": "ember-flexberry-data"
        },
        {
            "file": "addon/transforms/guid.js",
            "line": 23,
            "description": "Deserializes serialized attribute value.",
            "class": "GuidTransform",
            "module": "ember-flexberry-data"
        },
        {
            "file": "addon/transforms/guid.js",
            "line": 30,
            "description": "Serializes deserialized attribute value.",
            "class": "GuidTransform",
            "module": "ember-flexberry-data"
        },
        {
            "file": "addon/utils/attributes.js",
            "line": 8,
            "description": "Define plain attribute in projection.",
            "itemtype": "method",
            "name": "attr",
            "access": "public",
            "tagname": "",
            "params": [
                {
                    "name": "caption",
                    "description": "A user-friendly caption for attribute.",
                    "type": "String"
                },
                {
                    "name": "options",
                    "description": "Attribute options.",
                    "type": "Object",
                    "optional": true
                }
            ],
            "return": {
                "description": "Projection attribute.",
                "type": "Object"
            },
            "class": "Projection",
            "module": "ember-flexberry-data"
        },
        {
            "file": "addon/utils/attributes.js",
            "line": 23,
            "description": "Define belongsTo relationship attribute in projection.",
            "itemtype": "method",
            "name": "belongsTo",
            "access": "public",
            "tagname": "",
            "params": [
                {
                    "name": "modelName",
                    "description": "The name of the model type.",
                    "type": "String"
                },
                {
                    "name": "caption",
                    "description": "A user-friendly caption for attribute.",
                    "type": "String"
                },
                {
                    "name": "attributes",
                    "description": "Projection attributes.",
                    "type": "Object"
                },
                {
                    "name": "options",
                    "description": "Attribute options.",
                    "type": "Object",
                    "optional": true
                }
            ],
            "return": {
                "description": "Projection attribute.",
                "type": "Object"
            },
            "class": "Projection",
            "module": "ember-flexberry-data"
        },
        {
            "file": "addon/utils/attributes.js",
            "line": 43,
            "description": "Define hasMany relationship attribute in projection.",
            "itemtype": "method",
            "name": "hasMany",
            "access": "public",
            "tagname": "",
            "params": [
                {
                    "name": "modelName",
                    "description": "The name of the model type.",
                    "type": "String"
                },
                {
                    "name": "caption",
                    "description": "A user-friendly caption for attribute.",
                    "type": "String"
                },
                {
                    "name": "attributes",
                    "description": "Projection attributes.",
                    "type": "Object"
                },
                {
                    "name": "options",
                    "description": "Attribute options.",
                    "type": "Object",
                    "optional": true
                }
            ],
            "return": {
                "description": "Projection attribute.",
                "type": "Object"
            },
            "class": "Projection",
            "module": "ember-flexberry-data"
        },
        {
            "file": "addon/utils/batch-queries.js",
            "line": 5,
            "description": "Returns the type and boundary from the `Content-Type` header.",
            "itemtype": "method",
            "name": "getResponseMeta",
            "params": [
                {
                    "name": "contentTypeHeader",
                    "description": "The content of `Content-Type` header.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "Object with `contentType` and `boundary` properties.",
                "type": "Object"
            },
            "class": "Projection",
            "module": "ember-flexberry-data"
        },
        {
            "file": "addon/utils/batch-queries.js",
            "line": 17,
            "description": "Returns an array of batch responses from the body of the HTTP response.",
            "itemtype": "method",
            "name": "getBatchResponses",
            "params": [
                {
                    "name": "response",
                    "description": "The body of the HTTP response.",
                    "type": "String"
                },
                {
                    "name": "boundary",
                    "description": "The boundary.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "An array of batch responses.",
                "type": "String[]"
            },
            "class": "Projection",
            "module": "ember-flexberry-data"
        },
        {
            "file": "addon/utils/batch-queries.js",
            "line": 46,
            "description": "Parses a batch response depending on its type.\n\nThe returned object always contains the `contentType` property.\nDepending on the type of response it may contain the following additional properties:\n- `response` - for responses with `application/http` content type.\n- `changesets` - for responses with `multipart/mixed` content type.",
            "itemtype": "method",
            "name": "parseBatchResponse",
            "params": [
                {
                    "name": "response",
                    "description": "The batch response.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "The object with the response description.",
                "type": "Object"
            },
            "class": "Projection",
            "module": "ember-flexberry-data"
        },
        {
            "file": "addon/utils/batch-queries.js",
            "line": 76,
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "parseСhangeset",
            "params": [
                {
                    "name": "changeset",
                    "description": "The string with the changeset content.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "Object with `contentID`, `meta` and `body` properties.",
                "type": "Object"
            },
            "class": "Projection",
            "module": "ember-flexberry-data"
        },
        {
            "file": "addon/utils/batch-queries.js",
            "line": 89,
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "parseResponse",
            "params": [
                {
                    "name": "response",
                    "description": "The string with the response content.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "Object with `meta` and `body` properties.",
                "type": "Object"
            },
            "class": "Projection",
            "module": "ember-flexberry-data"
        },
        {
            "file": "addon/utils/batch-queries.js",
            "line": 118,
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "parseResponseMeta",
            "params": [
                {
                    "name": "rawMeta",
                    "description": "The string with the response metadata.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "Object with `status`, `statusText` and `contentType` properties.",
                "type": "Object"
            },
            "class": "Projection",
            "module": "ember-flexberry-data"
        },
        {
            "file": "addon/utils/batch-queries.js",
            "line": 137,
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "getResponseHeader",
            "params": [
                {
                    "name": "header",
                    "description": "The header name.",
                    "type": "String"
                },
                {
                    "name": "response",
                    "description": "The response from which will be extracted header.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "The content of the header.",
                "type": "String"
            },
            "class": "Projection",
            "module": "ember-flexberry-data"
        },
        {
            "file": "addon/utils/create.js",
            "line": 5,
            "description": "Creates model projection.",
            "itemtype": "method",
            "name": "create",
            "access": "public",
            "tagname": "",
            "params": [
                {
                    "name": "modelName",
                    "description": "The name of the model type.",
                    "type": "String"
                },
                {
                    "name": "attributes",
                    "description": "Projection attributes.",
                    "type": "Object"
                },
                {
                    "name": "projectionName",
                    "description": "The name of the projection type.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "Model projection.",
                "type": "Object"
            },
            "class": "Projection",
            "module": "ember-flexberry-data"
        },
        {
            "file": "addon/utils/enum-functions.js",
            "line": 7,
            "description": "Returns friezed object without prototype with own properties of parameter.",
            "itemtype": "method",
            "name": "createEnum",
            "params": [
                {
                    "name": "dictionary",
                    "description": "",
                    "type": "Object|Array"
                }
            ],
            "return": {
                "description": "",
                "type": "Object"
            },
            "class": "Utils.Information",
            "module": "ember-flexberry-data"
        },
        {
            "file": "addon/utils/enum-functions.js",
            "line": 25,
            "description": "Returns friezed inversed object without prototype.",
            "itemtype": "method",
            "name": "inverseEnum",
            "params": [
                {
                    "name": "dictionary",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "",
                "type": "Object"
            },
            "class": "Utils.Information",
            "module": "ember-flexberry-data"
        },
        {
            "file": "addon/utils/enum-functions.js",
            "line": 41,
            "description": "Returns object without null values.",
            "itemtype": "method",
            "name": "enumCaptions",
            "params": [
                {
                    "name": "dictionary",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "",
                "type": "Object"
            },
            "class": "Utils.Information",
            "module": "ember-flexberry-data"
        },
        {
            "file": "addon/utils/first-load-offline-objects.js",
            "line": 7,
            "description": "Load and save offline objects provided by odata function or returns objects count.\nTables with objects to load must be empty.",
            "itemtype": "method",
            "name": "firstLoadOfflineObjects",
            "params": [
                {
                    "name": "dexieDB",
                    "description": "Dexie DB (example: dexieService.dexie('DB name', store)).",
                    "type": "Object"
                },
                {
                    "name": "odataPath",
                    "description": "Odata Url (example: 'http://localhost:35904/odata').",
                    "type": "String"
                },
                {
                    "name": "functionName",
                    "description": "Odata function name.",
                    "type": "String"
                },
                {
                    "name": "modelName",
                    "description": "Model name for objects.",
                    "type": "String"
                },
                {
                    "name": "count",
                    "description": "Flag indicates that function returns objects or objects count.",
                    "type": "Bool"
                },
                {
                    "name": "top",
                    "description": "Amount of objects to load.",
                    "type": "Integer"
                },
                {
                    "name": "skip",
                    "description": "Amount of objects to skip from result.",
                    "type": "Integer"
                },
                {
                    "name": "idPath",
                    "description": "Path to string id in JSON ('guid' by default).",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "Promise"
            },
            "class": "Utils.Information",
            "module": "ember-flexberry-data"
        },
        {
            "file": "addon/utils/generate-unique-id.js",
            "line": 3,
            "return": {
                "description": "RFC4122 version 4 UUID",
                "type": "String"
            },
            "class": "Utils.Information",
            "module": "ember-flexberry-data"
        },
        {
            "file": "addon/utils/information.js",
            "line": 25,
            "description": "Checks if the specified attribute path is exist.",
            "itemtype": "method",
            "name": "isExist",
            "params": [
                {
                    "name": "modelName",
                    "description": "The name of the model.",
                    "type": "String"
                },
                {
                    "name": "attributePath",
                    "description": "The path to the attribute.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "True if the specified attribute path is exist.",
                "type": "Boolean"
            },
            "access": "public",
            "tagname": "",
            "class": "Utils.Information",
            "module": "ember-flexberry-data",
            "namespace": "Utils"
        },
        {
            "file": "addon/utils/information.js",
            "line": 44,
            "description": "Checks if the specified attribute path is an attribute.",
            "itemtype": "method",
            "name": "isAttribute",
            "params": [
                {
                    "name": "modelName",
                    "description": "The name of the model.",
                    "type": "String"
                },
                {
                    "name": "attributePath",
                    "description": "The path to the attribute.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "True if the specified attribute path is an attribute.",
                "type": "Boolean"
            },
            "access": "public",
            "tagname": "",
            "class": "Utils.Information",
            "module": "ember-flexberry-data",
            "namespace": "Utils"
        },
        {
            "file": "addon/utils/information.js",
            "line": 58,
            "description": "Checks if the specified attribute path is a key (i.e. it is an id or belongsTo relationship).",
            "itemtype": "method",
            "name": "isKey",
            "params": [
                {
                    "name": "modelName",
                    "description": "The name of the model.",
                    "type": "String"
                },
                {
                    "name": "attributePath",
                    "description": "The path to the attribute.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "True if the specified attribute path is a key.",
                "type": "Boolean"
            },
            "access": "public",
            "tagname": "",
            "class": "Utils.Information",
            "module": "ember-flexberry-data",
            "namespace": "Utils"
        },
        {
            "file": "addon/utils/information.js",
            "line": 72,
            "description": "Checks if the specified attribute path is a relationship.",
            "itemtype": "method",
            "name": "isRelationship",
            "params": [
                {
                    "name": "modelName",
                    "description": "The name of the model.",
                    "type": "String"
                },
                {
                    "name": "attributePath",
                    "description": "The path to the attribute.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "True if the specified attribute path is a relationship.",
                "type": "Boolean"
            },
            "access": "public",
            "tagname": "",
            "class": "Utils.Information",
            "module": "ember-flexberry-data",
            "namespace": "Utils"
        },
        {
            "file": "addon/utils/information.js",
            "line": 86,
            "description": "Checks if the specified attribute path is a master field.",
            "itemtype": "method",
            "name": "isMaster",
            "params": [
                {
                    "name": "modelName",
                    "description": "The name of the model.",
                    "type": "String"
                },
                {
                    "name": "attributePath",
                    "description": "The path to the attribute.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "True if the specified attribute path is a master field.",
                "type": "Boolean"
            },
            "access": "public",
            "tagname": "",
            "class": "Utils.Information",
            "module": "ember-flexberry-data",
            "namespace": "Utils"
        },
        {
            "file": "addon/utils/information.js",
            "line": 100,
            "description": "Checks if the specified attribute path is a detail field.",
            "itemtype": "method",
            "name": "isDetail",
            "params": [
                {
                    "name": "modelName",
                    "description": "The name of the model.",
                    "type": "String"
                },
                {
                    "name": "attributePath",
                    "description": "The path to the attribute.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "True if the specified attribute path is a detail field.",
                "type": "Boolean"
            },
            "access": "public",
            "tagname": "",
            "class": "Utils.Information",
            "module": "ember-flexberry-data",
            "namespace": "Utils"
        },
        {
            "file": "addon/utils/information.js",
            "line": 114,
            "description": "Checks if the specified attribute path is a ordered field.",
            "itemtype": "method",
            "name": "isOrdered",
            "params": [
                {
                    "name": "modelName",
                    "description": "The name of the model.",
                    "type": "String"
                },
                {
                    "name": "attributePath",
                    "description": "The path to the attribute.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "True if the specified attribute path is a detail field.",
                "type": "Boolean"
            },
            "access": "public",
            "tagname": "",
            "class": "Utils.Information",
            "module": "ember-flexberry-data",
            "namespace": "Utils"
        },
        {
            "file": "addon/utils/information.js",
            "line": 128,
            "description": "Returns the type of the specified attribute path.",
            "itemtype": "method",
            "name": "getType",
            "params": [
                {
                    "name": "modelName",
                    "description": "The name of the model.",
                    "type": "String"
                },
                {
                    "name": "attributePath",
                    "description": "The path to the attribute.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "The type of the specified attribute path.",
                "type": "String"
            },
            "access": "public",
            "tagname": "",
            "class": "Utils.Information",
            "module": "ember-flexberry-data",
            "namespace": "Utils"
        },
        {
            "file": "addon/utils/information.js",
            "line": 224,
            "description": "Parses the specified attribute paths and returns list of separate attributes.",
            "itemtype": "method",
            "name": "parseAttributePath",
            "params": [
                {
                    "name": "attributePath",
                    "description": "The path to the attribute.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "List of separate attributes.",
                "type": "Array"
            },
            "access": "public",
            "tagname": "",
            "static": 1,
            "class": "Utils.Information",
            "module": "ember-flexberry-data",
            "namespace": "Utils"
        },
        {
            "file": "addon/utils/is-embedded.js",
            "line": 1,
            "itemtype": "method",
            "name": "isEmbedded",
            "params": [
                {
                    "name": "store",
                    "description": "",
                    "type": "DS.Store"
                },
                {
                    "name": "modelType",
                    "description": "",
                    "type": "DS.Model"
                },
                {
                    "name": "relationshipName",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "Offline",
            "module": "ember-flexberry-data",
            "namespace": "Utils"
        },
        {
            "file": "addon/utils/is-uuid.js",
            "line": 1,
            "itemtype": "method",
            "name": "isUUID",
            "params": [
                {
                    "name": "uuid",
                    "description": "",
                    "type": "DS.Store"
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "Offline",
            "module": "ember-flexberry-data",
            "namespace": "Utils"
        },
        {
            "file": "addon/utils/model-functions.js",
            "line": 7,
            "description": "Gets related object type by relation name from specified model.",
            "itemtype": "method",
            "name": "_getRelationType",
            "params": [
                {
                    "name": "model",
                    "description": "Specified model to get relation from.",
                    "type": "String"
                },
                {
                    "name": "relationName",
                    "description": "Relation name.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "Related object type.",
                "type": "String"
            },
            "throws": {
                "description": "Throws error if relation was not found at model.",
                "type": "Error"
            },
            "class": "Offline",
            "module": "ember-flexberry"
        },
        {
            "file": "addon/utils/model-functions.js",
            "line": 30,
            "description": "Gets the value from locales.",
            "itemtype": "method",
            "name": "getValueFromLocales",
            "params": [
                {
                    "name": "i18n",
                    "description": "i18n service.",
                    "type": "Service"
                },
                {
                    "name": "key",
                    "description": "Key for property in locales.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "Value from locales. Returns `null` if key will not be found.",
                "type": "String"
            },
            "class": "Offline",
            "module": "ember-flexberry"
        },
        {
            "file": "addon/utils/queue.js",
            "line": 8,
            "description": "If set to `true` then error occurring should not stop performing operations in queue.",
            "itemtype": "property",
            "name": "continueOnError",
            "type": "Boolean",
            "default": "true",
            "class": "Offline",
            "module": "ember-flexberry"
        },
        {
            "file": "addon/utils/queue.js",
            "line": 22,
            "description": "Adds callback to then end of queue of Promises.",
            "itemtype": "method",
            "name": "attach",
            "params": [
                {
                    "name": "callback",
                    "description": "Callback to add to the end of queue. Takes `resolve` and `reject` functions of new Promise as params.",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "",
                "type": "Promise"
            },
            "class": "Offline",
            "module": "ember-flexberry"
        },
        {
            "file": "addon/utils/string-functions.js",
            "line": 21,
            "description": "Converts a camelized string into all lower case separated by underscores.\n```javascript\n'innerHTML'.decamelize();           // 'inner_html'\n'action_name'.decamelize();        // 'action_name'\n'css-class-name'.decamelize();     // 'css-class-name'\n'my favorite items'.decamelize();  // 'my favorite items'\n```",
            "itemtype": "method",
            "name": "decamelize",
            "params": [
                {
                    "name": "str",
                    "description": "The string to decamelize.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "the decamelized string.",
                "type": "String"
            },
            "class": "Offline",
            "module": "ember-flexberry-data"
        },
        {
            "file": "addon/utils/string-functions.js",
            "line": 37,
            "description": "Replaces underscores, spaces, or camelCase with dashes.\n```javascript\n'innerHTML'.dasherize();          // 'inner-html'\n'action_name'.dasherize();        // 'action-name'\n'css-class-name'.dasherize();     // 'css-class-name'\n'my favorite items'.dasherize();  // 'my-favorite-items'\n'privateDocs/ownerInvoice'.dasherize(); // 'private-docs/owner-invoice'\n```",
            "itemtype": "method",
            "name": "dasherize",
            "params": [
                {
                    "name": "str",
                    "description": "The string to dasherize.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "the dasherized string.",
                "type": "String"
            },
            "class": "Offline",
            "module": "ember-flexberry-data"
        },
        {
            "file": "addon/utils/string-functions.js",
            "line": 54,
            "description": "Returns the lowerCamelCase form of a string.\n```javascript\n'innerHTML'.camelize();          // 'innerHTML'\n'action_name'.camelize();        // 'actionName'\n'css-class-name'.camelize();     // 'cssClassName'\n'my favorite items'.camelize();  // 'myFavoriteItems'\n'My Favorite Items'.camelize();  // 'myFavoriteItems'\n'private-docs/owner-invoice'.camelize(); // 'privateDocs/ownerInvoice'\n```",
            "itemtype": "method",
            "name": "camelize",
            "params": [
                {
                    "name": "str",
                    "description": "The string to camelize.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "the camelized string.",
                "type": "String"
            },
            "class": "Offline",
            "module": "ember-flexberry-data"
        },
        {
            "file": "addon/utils/string-functions.js",
            "line": 73,
            "description": "Returns the UpperCamelCase form of a string.\n```javascript\n'innerHTML'.classify();          // 'InnerHTML'\n'action_name'.classify();        // 'ActionName'\n'css-class-name'.classify();     // 'CssClassName'\n'my favorite items'.classify();  // 'MyFavoriteItems'\n'private-docs/owner-invoice'.classify(); // 'PrivateDocs/OwnerInvoice'\n```",
            "itemtype": "method",
            "name": "classify",
            "params": [
                {
                    "name": "str",
                    "description": "the string to classify",
                    "type": "String"
                }
            ],
            "return": {
                "description": "the classified string",
                "type": "String"
            },
            "class": "Offline",
            "module": "ember-flexberry-data"
        },
        {
            "file": "addon/utils/string-functions.js",
            "line": 99,
            "description": "More general than decamelize. Returns the lower\\_case\\_and\\_underscored\nform of a string.\n```javascript\n'innerHTML'.underscore();          // 'inner_html'\n'action_name'.underscore();        // 'action_name'\n'css-class-name'.underscore();     // 'css_class_name'\n'my favorite items'.underscore();  // 'my_favorite_items'\n'privateDocs/ownerInvoice'.underscore(); // 'private_docs/owner_invoice'\n```",
            "itemtype": "method",
            "name": "underscore",
            "params": [
                {
                    "name": "str",
                    "description": "The string to underscore.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "the underscored string.",
                "type": "String"
            },
            "class": "Offline",
            "module": "ember-flexberry-data"
        },
        {
            "file": "addon/utils/string-functions.js",
            "line": 117,
            "description": "Returns the Capitalized form of a string\n```javascript\n'innerHTML'.capitalize()         // 'InnerHTML'\n'action_name'.capitalize()       // 'Action_name'\n'css-class-name'.capitalize()    // 'Css-class-name'\n'my favorite items'.capitalize() // 'My favorite items'\n'privateDocs/ownerInvoice'.capitalize(); // 'PrivateDocs/ownerInvoice'\n```",
            "itemtype": "method",
            "name": "capitalize",
            "params": [
                {
                    "name": "str",
                    "description": "The string to capitalize.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "The capitalized string.",
                "type": "String"
            },
            "class": "Offline",
            "module": "ember-flexberry-data"
        }
    ],
    "warnings": [
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " addon/query/indexeddb-adapter.js:589"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " addon/query/js-adapter.js:47"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " addon/query/js-adapter.js:64"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " addon/query/js-adapter.js:93"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " addon/query/js-adapter.js:145"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " addon/query/js-adapter.js:284"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " addon/query/js-adapter.js:425"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " addon/query/js-adapter.js:451"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " addon/query/js-adapter.js:481"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " addon/query/odata-adapter.js:317"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " addon/query/predicate.js:435"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " addon/query/predicate.js:444"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " addon/query/predicate.js:453"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " addon/query/predicate.js:462"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " addon/query/predicate.js:471"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " addon/query/predicate.js:487"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " addon/serializers/base.js:24"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " addon/serializers/base.js:44"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " addon/serializers/base.js:60"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " addon/serializers/base.js:81"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " addon/serializers/base.js:100"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " addon/serializers/base.js:110"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " addon/serializers/odata.js:53"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " addon/services/syncer.js:319"
        },
        {
            "message": "replacing incorrect tag: function with method",
            "line": " addon/utils/enum-functions.js:7"
        },
        {
            "message": "replacing incorrect tag: function with method",
            "line": " addon/utils/enum-functions.js:25"
        },
        {
            "message": "replacing incorrect tag: function with method",
            "line": " addon/utils/enum-functions.js:41"
        },
        {
            "message": "replacing incorrect tag: function with method",
            "line": " addon/utils/first-load-offline-objects.js:7"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " addon/utils/information.js:25"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " addon/utils/information.js:44"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " addon/utils/information.js:58"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " addon/utils/information.js:72"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " addon/utils/information.js:86"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " addon/utils/information.js:100"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " addon/utils/information.js:114"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " addon/utils/information.js:128"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " addon/utils/information.js:224"
        },
        {
            "message": "Missing item type\nA method to generate url for ajax request to odata function.",
            "line": " addon/adapters/odata.js:190"
        },
        {
            "message": "Missing item type\nA method to make ajax requests.",
            "line": " addon/adapters/odata.js:623"
        },
        {
            "message": "Missing item type\nField name where object identifier is kept.",
            "line": " addon/mixins/regenerated/serializers/i-c-s-soft-s-t-o-r-m-n-e-t-business-audit-objects-audit-entity.js:10"
        },
        {
            "message": "Missing item type\nField name where object identifier is kept.",
            "line": " addon/mixins/regenerated/serializers/i-c-s-soft-s-t-o-r-m-n-e-t-business-audit-objects-audit-field.js:9"
        },
        {
            "message": "Missing item type\nField name where object identifier is kept.",
            "line": " addon/mixins/regenerated/serializers/i-c-s-soft-s-t-o-r-m-n-e-t-business-audit-objects-object-type.js:7"
        },
        {
            "message": "Missing item type\nField name where object identifier is kept.",
            "line": " addon/mixins/regenerated/serializers/i-c-s-soft-s-t-o-r-m-n-e-t-security-agent.js:7"
        },
        {
            "message": "Missing item type\nField name where object identifier is kept.",
            "line": " addon/mixins/regenerated/serializers/i-c-s-soft-s-t-o-r-m-n-e-t-security-link-group.js:9"
        },
        {
            "message": "Missing item type\nField name where object identifier is kept.",
            "line": " addon/mixins/regenerated/serializers/i-c-s-soft-s-t-o-r-m-n-e-t-security-session.js:7"
        },
        {
            "message": "Missing item type\nInitializes model.",
            "line": " addon/models/model.js:381"
        },
        {
            "message": "Missing item type\nDestroys model.",
            "line": " addon/models/model.js:432"
        },
        {
            "message": "Missing item type\nBuilds Dexie `WhereClause` for filtering data.\nFiltering only with Dexie can applied only for simple cases (for `SimplePredicate`).\nFor complex cases all logic implemened programmatically.",
            "line": " addon/query/indexeddb-adapter.js:589"
        },
        {
            "message": "Missing item type\nBuilds function for windowing array of objects using data from the query.",
            "line": " addon/query/js-adapter.js:64"
        },
        {
            "message": "Missing item type\nBuilds function for ordering array of objects using data from the query.",
            "line": " addon/query/js-adapter.js:93"
        },
        {
            "message": "Missing item type\nBuilds function for selecting subset of properties from array of objects using data from the query.",
            "line": " addon/query/js-adapter.js:145"
        },
        {
            "message": "Missing item type\nBuilds function for filtering array of objects using predicate.",
            "line": " addon/query/js-adapter.js:234"
        },
        {
            "message": "Missing item type\nReturns function for checkign single object using predicate.",
            "line": " addon/query/js-adapter.js:284"
        },
        {
            "message": "Missing item type\nLoads value from object by specified attribute path.",
            "line": " addon/query/js-adapter.js:425"
        },
        {
            "message": "Missing item type\nReturns complex filter function for `and` condition.\nResult function filters array of objects and returns those, for which\nall attribute filter functions returned `true`.\nResult function uses short circuit logic ([wiki](https://en.wikipedia.org/wiki/Short-circuit_evaluation)).",
            "line": " addon/query/js-adapter.js:451"
        },
        {
            "message": "Missing item type\nReturns complex filter function for `or` condition.\nResult function filters array of objects and returns those, for which\nat least one attribute filter function returned `true`.\nResult function uses short circuit logic ([wiki](https://en.wikipedia.org/wiki/Short-circuit_evaluation)).",
            "line": " addon/query/js-adapter.js:481"
        },
        {
            "message": "Missing item type\nConverts specified predicate into OData filter part.",
            "line": " addon/query/odata-adapter.js:233"
        },
        {
            "message": "Missing item type\nConverts filter operator to OData representation.",
            "line": " addon/query/odata-adapter.js:317"
        },
        {
            "message": "Missing item type\nThe path to the detail for predicate.",
            "line": " addon/query/predicate.js:435"
        },
        {
            "message": "Missing item type\nThe predicate for details.",
            "line": " addon/query/predicate.js:444"
        },
        {
            "message": "Missing item type\nIs need to use predicate for all details.",
            "line": " addon/query/predicate.js:453"
        },
        {
            "message": "Missing item type\nIs need to use predicate for any detail.",
            "line": " addon/query/predicate.js:462"
        },
        {
            "message": "Missing item type\nThrows error if specified argument is not a predicate.",
            "line": " addon/query/predicate.js:665"
        },
        {
            "message": "Missing item type\nFlag: indicates whether to use new {@link http://jsonapi.org|JSON API} serialization.",
            "line": " addon/serializers/base.js:14"
        },
        {
            "message": "Missing item type\nPrefix for response metadata properties names.",
            "line": " addon/serializers/base.js:19"
        },
        {
            "message": "Missing item type\nNormalization method for single objects.",
            "line": " addon/serializers/base.js:24"
        },
        {
            "message": "Missing item type\nNormalization method for arrays of objects.",
            "line": " addon/serializers/base.js:44"
        },
        {
            "message": "Missing item type\nNormalization method for objects.",
            "line": " addon/serializers/base.js:60"
        },
        {
            "message": "Missing item type\nExtracts metadata from received object.",
            "line": " addon/serializers/base.js:81"
        },
        {
            "message": "Missing item type\nReturns key for a given attribute.",
            "line": " addon/serializers/base.js:100"
        },
        {
            "message": "Missing item type\nReturns key for a given relationship.",
            "line": " addon/serializers/base.js:110"
        },
        {
            "message": "Missing item type\nSerialization method to serialize record into hash.",
            "line": " addon/serializers/base.js:133"
        },
        {
            "message": "Missing item type\nMoves metadata from one object to another.",
            "line": " addon/serializers/base.js:199"
        },
        {
            "message": "Missing item type\nReturns key for a given relationship.",
            "line": " addon/serializers/odata.js:53"
        },
        {
            "message": "Missing item type\nIf the adapter returns the `belongsTo` relation as an identifier, we will replace it with an object with the `id` property.\n\nSee [EmberJS API](https://emberjs.com/api/).",
            "line": " addon/serializers/offline.js:27"
        },
        {
            "message": "Missing item type",
            "line": " addon/services/syncer.js:49"
        },
        {
            "message": "Missing item type",
            "line": " addon/services/syncer.js:309"
        },
        {
            "message": "Missing item type",
            "line": " addon/services/syncer.js:342"
        },
        {
            "message": "Missing item type\nStarts syncing up through batch.",
            "line": " addon/services/syncer.js:370"
        },
        {
            "message": "Missing item type",
            "line": " addon/services/syncer.js:411"
        },
        {
            "message": "Missing item type",
            "line": " addon/services/syncer.js:427"
        },
        {
            "message": "Missing item type\nReturns record to create for syncing up.",
            "line": " addon/services/syncer.js:441"
        },
        {
            "message": "Missing item type",
            "line": " addon/services/syncer.js:459"
        },
        {
            "message": "Missing item type\nReturns record to update for syncing up.",
            "line": " addon/services/syncer.js:474"
        },
        {
            "message": "Missing item type",
            "line": " addon/services/syncer.js:494"
        },
        {
            "message": "Missing item type\nReturns record to remove for syncing up.",
            "line": " addon/services/syncer.js:510"
        },
        {
            "message": "Missing item type",
            "line": " addon/services/syncer.js:528"
        },
        {
            "message": "Missing item type",
            "line": " addon/services/syncer.js:544"
        },
        {
            "message": "Missing item type",
            "line": " addon/services/syncer.js:553"
        },
        {
            "message": "Missing item type",
            "line": " addon/services/syncer.js:559"
        },
        {
            "message": "Missing item type",
            "line": " addon/services/syncer.js:586"
        },
        {
            "message": "Missing item type",
            "line": " addon/services/syncer.js:603"
        },
        {
            "message": "Missing item type",
            "line": " addon/services/syncer.js:615"
        },
        {
            "message": "Missing item type",
            "line": " addon/services/syncer.js:637"
        },
        {
            "message": "Missing item type",
            "line": " addon/services/syncer.js:654"
        },
        {
            "message": "Missing item type",
            "line": " addon/services/syncer.js:665"
        },
        {
            "message": "Missing item type",
            "line": " addon/services/syncer.js:711"
        },
        {
            "message": "Missing item type",
            "line": " addon/services/syncer.js:750"
        },
        {
            "message": "Missing item type",
            "line": " addon/services/syncer.js:766"
        },
        {
            "message": "Missing item type",
            "line": " addon/services/user.js:8"
        },
        {
            "message": "Missing item type\nPushes into store the model that exists in backend without a request to it.",
            "line": " addon/stores/local-store.js:248"
        },
        {
            "message": "Missing item type\nPushes into store the model that exists in backend without a request to it.",
            "line": " addon/stores/online-store.js:50"
        },
        {
            "message": "Missing item type\nDeserializes serialized attribute value.",
            "line": " addon/transforms/decimal.js:25"
        },
        {
            "message": "Missing item type\nSerializes deserialized attribute value.",
            "line": " addon/transforms/decimal.js:32"
        },
        {
            "message": "Missing item type\nDeserializes serialized attribute value.",
            "line": " addon/transforms/file.js:25"
        },
        {
            "message": "Missing item type\nSerializes deserialized attribute value.",
            "line": " addon/transforms/file.js:33"
        },
        {
            "message": "Missing item type\nAn overridable method called when objects are instantiated.\nFor more information see [init](http://emberjs.com/api/classes/Ember.View.html#method_init) method of [Ember.View](http://emberjs.com/api/classes/Ember.View.html).",
            "line": " addon/transforms/flexberry-enum.js:70"
        },
        {
            "message": "Missing item type\nDeserializes serialized attribute value.",
            "line": " addon/transforms/guid.js:23"
        },
        {
            "message": "Missing item type\nSerializes deserialized attribute value.",
            "line": " addon/transforms/guid.js:30"
        },
        {
            "message": "Missing item type",
            "line": " addon/utils/generate-unique-id.js:3"
        }
    ]
}